"""File Generated by Sideko (sideko.dev)"""

import pytest
from wealthtech_api import AsyncClient, Client
from wealthtech_api.types.billing.fee_structures import models
from pydantic import TypeAdapter

# test sync & async methods (keep comment for code generation)


def test_put_by_id_200_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.billing.fee_structures.put_by_id(
        id=123,
        data={
            "balance_type": "E",
            "calculation_type": "string",
            "collection_type": "D",
            "created_at_utc": "1970-01-01T00:00:00",
            "created_by_user_id": 123,
            "firm_id": 123,
            "flat_dollar_fee": 123.45,
            "flat_rate": 123.45,
            "frequency": "Q",
            "id": 123,
            "name": "string",
            "quarter_cycle": 123,
            "slug": "string",
            "tiers": [
                {
                    "fee_structure_id": 123,
                    "id": 123,
                    "max_balance": 123.45,
                    "min_balance": 123.45,
                    "rate": 123.45,
                }
            ],
            "updated_at_utc": "1970-01-01T00:00:00",
        },
    )
    adapter = TypeAdapter(models.PutBillingFeeStructuresIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_put_by_id_200_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.billing.fee_structures.put_by_id(
        id=123,
        data={
            "balance_type": "E",
            "calculation_type": "string",
            "collection_type": "D",
            "created_at_utc": "1970-01-01T00:00:00",
            "created_by_user_id": 123,
            "firm_id": 123,
            "flat_dollar_fee": 123.45,
            "flat_rate": 123.45,
            "frequency": "Q",
            "id": 123,
            "name": "string",
            "quarter_cycle": 123,
            "slug": "string",
            "tiers": [
                {
                    "fee_structure_id": 123,
                    "id": 123,
                    "max_balance": 123.45,
                    "min_balance": 123.45,
                    "rate": 123.45,
                }
            ],
            "updated_at_utc": "1970-01-01T00:00:00",
        },
    )
    adapter = TypeAdapter(models.PutBillingFeeStructuresIdResponse)
    adapter.validate_python(response)


def test_put_200_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.billing.fee_structures.put(
        data=[
            {
                "balance_type": "C",
                "calculation_type": "string",
                "collection_type": "A",
                "created_at_utc": "1970-01-01T00:00:00",
                "created_by_user_id": 123,
                "firm_id": 123,
                "flat_dollar_fee": 123.45,
                "flat_rate": 123.45,
                "frequency": "M",
                "id": 123,
                "name": "string",
                "quarter_cycle": 123,
                "slug": "string",
                "tiers": [
                    {
                        "fee_structure_id": 123,
                        "id": 123,
                        "max_balance": 123.45,
                        "min_balance": 123.45,
                        "rate": 123.45,
                    }
                ],
                "updated_at_utc": "1970-01-01T00:00:00",
            }
        ]
    )
    adapter = TypeAdapter(models.PutBillingFeeStructuresResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_put_200_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.billing.fee_structures.put(
        data=[
            {
                "balance_type": "C",
                "calculation_type": "string",
                "collection_type": "A",
                "created_at_utc": "1970-01-01T00:00:00",
                "created_by_user_id": 123,
                "firm_id": 123,
                "flat_dollar_fee": 123.45,
                "flat_rate": 123.45,
                "frequency": "M",
                "id": 123,
                "name": "string",
                "quarter_cycle": 123,
                "slug": "string",
                "tiers": [
                    {
                        "fee_structure_id": 123,
                        "id": 123,
                        "max_balance": 123.45,
                        "min_balance": 123.45,
                        "rate": 123.45,
                    }
                ],
                "updated_at_utc": "1970-01-01T00:00:00",
            }
        ]
    )
    adapter = TypeAdapter(models.PutBillingFeeStructuresResponse)
    adapter.validate_python(response)


def test_create_200_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.billing.fee_structures.create(
        pager_limit=123,
        pager_page=123,
        data={
            "balance_type": "E",
            "calculation_type": "T",
            "collection_type": "R",
            "created_by_user_id": 123,
            "firm_id": 39,
            "flat_dollar_fee": 123.45,
            "flat_rate": 1,
            "frequency": "Q",
            "name": "Standard Tiered Rate",
            "quarter_cycle": 1,
            "slug": "standard-tiered-rate",
            "tiers": [
                {
                    "fee_structure_id": 1290,
                    "id": 4249,
                    "max_balance": 1000000,
                    "min_balance": 0,
                    "rate": 0.9,
                },
                {
                    "fee_structure_id": 1290,
                    "id": 4250,
                    "max_balance": None,
                    "min_balance": 1000000.01,
                    "rate": 0.75,
                },
            ],
        },
    )
    adapter = TypeAdapter(models.PostBillingFeeStructuresResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_create_200_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.billing.fee_structures.create(
        pager_limit=123,
        pager_page=123,
        data={
            "balance_type": "E",
            "calculation_type": "T",
            "collection_type": "R",
            "created_by_user_id": 123,
            "firm_id": 39,
            "flat_dollar_fee": 123.45,
            "flat_rate": 1,
            "frequency": "Q",
            "name": "Standard Tiered Rate",
            "quarter_cycle": 1,
            "slug": "standard-tiered-rate",
            "tiers": [
                {
                    "fee_structure_id": 1290,
                    "id": 4249,
                    "max_balance": 1000000,
                    "min_balance": 0,
                    "rate": 0.9,
                },
                {
                    "fee_structure_id": 1290,
                    "id": 4250,
                    "max_balance": None,
                    "min_balance": 1000000.01,
                    "rate": 0.75,
                },
            ],
        },
    )
    adapter = TypeAdapter(models.PostBillingFeeStructuresResponse)
    adapter.validate_python(response)


def test_get_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.billing.fee_structures.get(
        id=123, pager_limit=123, pager_page=123
    )
    adapter = TypeAdapter(models.GetBillingFeeStructuresIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.billing.fee_structures.get(
        id=123, pager_limit=123, pager_page=123
    )
    adapter = TypeAdapter(models.GetBillingFeeStructuresIdResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.billing.fee_structures.list(pager_limit=123, pager_page=123)
    adapter = TypeAdapter(models.GetBillingFeeStructuresResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.billing.fee_structures.list(pager_limit=123, pager_page=123)
    adapter = TypeAdapter(models.GetBillingFeeStructuresResponse)
    adapter.validate_python(response)


def test_delete_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.billing.fee_structures.delete(
        id=123, pager_limit=123, pager_page=123
    )
    adapter = TypeAdapter(models.Delete)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_delete_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.billing.fee_structures.delete(
        id=123, pager_limit=123, pager_page=123
    )
    adapter = TypeAdapter(models.Delete)
    adapter.validate_python(response)
