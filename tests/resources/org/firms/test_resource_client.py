"""File Generated by Sideko (sideko.dev)"""

import pytest
from wealthtech_api import Client, AsyncClient
from wealthtech_api.types.org.firms import models
from pydantic import TypeAdapter

# test sync & async methods (keep comment for code generation)


def test_put_200_generated_success_default():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.org.firms.put(
        id=123,
        data={
            "accent_color": "string",
            "billing_include_accrued_income": True,
            "billing_partition_option": "D",
            "brand_colors": ["string"],
            "cp_enabled": True,
            "cp_heldaways_enabled": True,
            "cp_invoices_enabled": True,
            "cp_printable_reports_enabled": True,
            "cp_shared_files_enabled": True,
            "cp_web_reports_enabled": True,
            "created_at_utc": "1970-01-01T00:00:00",
            "disclosures": "string",
            "id": 123,
            "invoice_annualized_effective_rates": True,
            "invoice_due_date_option": "30",
            "invoice_effective_rates": True,
            "invoice_footer": "string",
            "invoice_from": "string",
            "invoice_header": "string",
            "invoice_include_fee_structures": True,
            "invoice_not_a_bill_explanation": True,
            "invoice_show_agreement": True,
            "is_active": True,
            "is_billing_active": True,
            "logo_url": "string",
            "name": "string",
            "parent_firm_id": 123,
            "permissions": ["string"],
            "primary_color": "string",
            "relationship_code": "string",
            "report_on_heldaway_accounts": True,
            "reporting_frequency": "Q",
            "short_name": "string",
            "show_bridge_logo": True,
            "show_firm_logo": True,
            "updated_at_utc": "1970-01-01T00:00:00",
        },
    )
    adapter = TypeAdapter(models.PutOrgFirmsIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_put_200_generated_success_default():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.org.firms.put(
        id=123,
        data={
            "accent_color": "string",
            "billing_include_accrued_income": True,
            "billing_partition_option": "D",
            "brand_colors": ["string"],
            "cp_enabled": True,
            "cp_heldaways_enabled": True,
            "cp_invoices_enabled": True,
            "cp_printable_reports_enabled": True,
            "cp_shared_files_enabled": True,
            "cp_web_reports_enabled": True,
            "created_at_utc": "1970-01-01T00:00:00",
            "disclosures": "string",
            "id": 123,
            "invoice_annualized_effective_rates": True,
            "invoice_due_date_option": "30",
            "invoice_effective_rates": True,
            "invoice_footer": "string",
            "invoice_from": "string",
            "invoice_header": "string",
            "invoice_include_fee_structures": True,
            "invoice_not_a_bill_explanation": True,
            "invoice_show_agreement": True,
            "is_active": True,
            "is_billing_active": True,
            "logo_url": "string",
            "name": "string",
            "parent_firm_id": 123,
            "permissions": ["string"],
            "primary_color": "string",
            "relationship_code": "string",
            "report_on_heldaway_accounts": True,
            "reporting_frequency": "Q",
            "short_name": "string",
            "show_bridge_logo": True,
            "show_firm_logo": True,
            "updated_at_utc": "1970-01-01T00:00:00",
        },
    )
    adapter = TypeAdapter(models.PutOrgFirmsIdResponse)
    adapter.validate_python(response)


def test_get_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.org.firms.get(id=123, pager_limit=123, pager_page=123)
    adapter = TypeAdapter(models.GetOrgFirmsIdResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_get_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.org.firms.get(id=123, pager_limit=123, pager_page=123)
    adapter = TypeAdapter(models.GetOrgFirmsIdResponse)
    adapter.validate_python(response)


def test_list_200_generated_success():
    """Test description"""
    # tests calling sync method with example data (keep comment for code generation)
    client = Client(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = client.org.firms.list(pager_limit=123, pager_page=123)
    adapter = TypeAdapter(models.GetOrgFirmsResponse)
    adapter.validate_python(response)


@pytest.mark.asyncio
async def test_await_list_200_generated_success():
    """Test description"""
    # tests calling async method with example data (keep comment for code generation)
    client = AsyncClient(
        username="API_USERNAME",
        password="API_PASSWORD",
        token="API_TOKEN",
        base_url="https://api.sideko.dev/v1/api_project/a9773eee-d42b-469d-a46d-faaf05e641b0/version/43ecbc55-8afa-476e-ab94-df5433a98189/mock",
    )
    response = await client.org.firms.list(pager_limit=123, pager_page=123)
    adapter = TypeAdapter(models.GetOrgFirmsResponse)
    adapter.validate_python(response)
