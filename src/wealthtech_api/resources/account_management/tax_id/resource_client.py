"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    SyncBaseClient,
    AsyncBaseClient,
    RequestOptions,
    to_encodable,
    default_request_options,
)
from wealthtech_api.resources.account_management.tax_id.exchange import (
    AsyncExchangeClient,
    ExchangeClient,
)
import typing


class TaxIdClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.exchange = ExchangeClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create_by_taxid(
        self, *, taxid: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Exchange a single Tax ID for the tokenized representation.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/account-management/tax-id/{taxid}",
            auth_names=["bearerAuth"],
            cast_to=str,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def create(
        self,
        *,
        data: typing.List[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[str]:
        """
        Exchange multiple Tax IDs for their tokenized representations.
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=typing.List[str])
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/account-management/tax-id",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=typing.List[str],
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncTaxIdClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.exchange = AsyncExchangeClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create_by_taxid(
        self, *, taxid: str, request_options: typing.Optional[RequestOptions] = None
    ) -> str:
        """
        Exchange a single Tax ID for the tokenized representation.
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/account-management/tax-id/{taxid}",
            auth_names=["bearerAuth"],
            cast_to=str,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def create(
        self,
        *,
        data: typing.List[str],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[str]:
        """
        Exchange multiple Tax IDs for their tokenized representations.
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=typing.List[str])
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/account-management/tax-id",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=typing.List[str],
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
