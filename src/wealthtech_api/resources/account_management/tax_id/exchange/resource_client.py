"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    RequestOptions,
    AsyncBaseClient,
    default_request_options,
    SyncBaseClient,
    to_encodable,
)
from wealthtech_api.types.account_management.tax_id.exchange import models, params
import typing


class ExchangeClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create_by_tax_id_token(
        self,
        *,
        tax_id_token: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostAccountManagementTaxIdExchangeTaxIdTokenResponse:
        """
        Exchange`tax_id_token` For Plain Text Value
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path=f"/account-management/tax-id/exchange/{tax_id_token}",
            auth_names=["bearerAuth"],
            cast_to=models.PostAccountManagementTaxIdExchangeTaxIdTokenResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def create(
        self,
        *,
        data: params.PostAccountManagementTaxIdExchangeBody,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[models.PostAccountManagementTaxIdExchangeResponseItem]:
        """
        Exchange list of `tax_id_tokens` For Their Plain Text Values
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPostAccountManagementTaxIdExchangeBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/account-management/tax-id/exchange",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=typing.List[models.PostAccountManagementTaxIdExchangeResponseItem],
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncExchangeClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create_by_tax_id_token(
        self,
        *,
        tax_id_token: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostAccountManagementTaxIdExchangeTaxIdTokenResponse:
        """
        Exchange`tax_id_token` For Plain Text Value
        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path=f"/account-management/tax-id/exchange/{tax_id_token}",
            auth_names=["bearerAuth"],
            cast_to=models.PostAccountManagementTaxIdExchangeTaxIdTokenResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def create(
        self,
        *,
        data: params.PostAccountManagementTaxIdExchangeBody,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[models.PostAccountManagementTaxIdExchangeResponseItem]:
        """
        Exchange list of `tax_id_tokens` For Their Plain Text Values
        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data,
            dump_with=params._SerializerPostAccountManagementTaxIdExchangeBody,
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/account-management/tax-id/exchange",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=typing.List[models.PostAccountManagementTaxIdExchangeResponseItem],
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
