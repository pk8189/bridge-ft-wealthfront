"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    RequestOptions,
    encode_param,
    QueryParams,
    default_request_options,
    AsyncBaseClient,
    SyncBaseClient,
    to_encodable,
)
from wealthtech_api.resources.account_management.accounts.filter import (
    FilterClient,
    AsyncFilterClient,
)
import typing
from wealthtech_api.types.account_management.accounts import models, params


class AccountsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.filter = FilterClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def put_by_id(
        self,
        *,
        data: params.Account,
        id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Account:
        """
        Provide an account to update. Then entire account object **must** be provided to the `PUT` request.

        **Editable Fields:**
        - `benchmark_ids`
        - `fee_structure_ids`
        - `billing_split_ids`
        - `notes`
        - `nickname`
        - `household_id` To remove an account from a household, provide `null` in this field.
        - `target_allocation_id`
        - `first_performance_date`
        - `payment_source`
        - `first_billable_date`
        - `investment_model_id`
        - `required_cash`
        - `unsupervised_securities_ids`
        - `buy_securities_ids`
        - `sell_securities_ids`
        - `do_not_buy_securities_ids`
        - `do_not_sell_securities_ids`
        - `required_cash_frequency`

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerAccount)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path=f"/account-management/accounts/{id}",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.Account,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def put(
        self,
        *,
        data: typing.List[params.Account],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PutAccountManagementAccountsResponse:
        """
        Provide a list of accounts to update. Then entire account object **must** be provided to the `PUT` request.

        **Editable Fields:**
        - `benchmarks_ids`
        - `fee_structures_ids`
        - `billing_splits_ids`
        - `notes`
        - `nickname`
        - `household_id` To remove an account from a household, provide `null` in this field.
        - `target_allocation_id`
        - `first_performance_date`
        - `payment_source`
        - `first_billable_date`
        - `investment_model_id`
        - `required_cash`
        - `unsupervised_securities_ids`
        - `buy_securities_ids`
        - `sell_securities_ids`
        - `do_not_buy_securities_ids`
        - `do_not_sell_securities_ids`
        - `required_cash_frequency`

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=typing.List[params._SerializerAccount]
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path="/account-management/accounts",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PutAccountManagementAccountsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Account:
        """
        Returns an account based on a single ID
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/account-management/accounts/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.Account,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAccountManagementAccountsResponse:
        """
        Return an enveloped list of Accounts accessible to your application
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/account-management/accounts",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetAccountManagementAccountsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAccountsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.filter = AsyncFilterClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def put_by_id(
        self,
        *,
        data: params.Account,
        id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Account:
        """
        Provide an account to update. Then entire account object **must** be provided to the `PUT` request.

        **Editable Fields:**
        - `benchmark_ids`
        - `fee_structure_ids`
        - `billing_split_ids`
        - `notes`
        - `nickname`
        - `household_id` To remove an account from a household, provide `null` in this field.
        - `target_allocation_id`
        - `first_performance_date`
        - `payment_source`
        - `first_billable_date`
        - `investment_model_id`
        - `required_cash`
        - `unsupervised_securities_ids`
        - `buy_securities_ids`
        - `sell_securities_ids`
        - `do_not_buy_securities_ids`
        - `do_not_sell_securities_ids`
        - `required_cash_frequency`

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerAccount)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path=f"/account-management/accounts/{id}",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.Account,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def put(
        self,
        *,
        data: typing.List[params.Account],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PutAccountManagementAccountsResponse:
        """
        Provide a list of accounts to update. Then entire account object **must** be provided to the `PUT` request.

        **Editable Fields:**
        - `benchmarks_ids`
        - `fee_structures_ids`
        - `billing_splits_ids`
        - `notes`
        - `nickname`
        - `household_id` To remove an account from a household, provide `null` in this field.
        - `target_allocation_id`
        - `first_performance_date`
        - `payment_source`
        - `first_billable_date`
        - `investment_model_id`
        - `required_cash`
        - `unsupervised_securities_ids`
        - `buy_securities_ids`
        - `sell_securities_ids`
        - `do_not_buy_securities_ids`
        - `do_not_sell_securities_ids`
        - `required_cash_frequency`

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(
            item=data, dump_with=typing.List[params._SerializerAccount]
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path="/account-management/accounts",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PutAccountManagementAccountsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Account:
        """
        Returns an account based on a single ID
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/account-management/accounts/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.Account,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAccountManagementAccountsResponse:
        """
        Return an enveloped list of Accounts accessible to your application
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/account-management/accounts",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetAccountManagementAccountsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
