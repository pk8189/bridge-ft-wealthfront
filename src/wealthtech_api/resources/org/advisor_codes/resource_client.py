"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    encode_param,
    AsyncBaseClient,
    RequestOptions,
    QueryParams,
    to_encodable,
    default_request_options,
    SyncBaseClient,
)
from wealthtech_api.resources.org.advisor_codes.create_many import (
    CreateManyClient,
    AsyncCreateManyClient,
)
from wealthtech_api.resources.org.advisor_codes.delete_many import (
    AsyncDeleteManyClient,
    DeleteManyClient,
)
import typing
from wealthtech_api.types.org.advisor_codes import params, models


class AdvisorCodesClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.create_many = CreateManyClient(base_client=self._base_client)
        self.delete_many = DeleteManyClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: params.PostOrgAdvisorCodesBody,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostOrgAdvisorCodesResponse:
        """
        Returns the created Advisor Code, if successful.

        **Note for Advisor Code Mapping in Sandbox Applications**
        To preserve the data integrity of sandbox applications, the advisor code mapping endpoints are read-only
        and requests for creation or deletion of advisor codes will not result in updates to advisor code mappings.
        Sandbox applications can read advisor codes from the `/v2/org/advisor-codes` endpoint, but the changes will not
        be reflected upon updates.

        For production applications, full access is granted to the advisor code mapping endpoints. Creations and removals
        of advisor codes will be applied to the advisor codes mapped to the application.

        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostOrgAdvisorCodesBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/org/advisor-codes",
            auth_names=["bearerAuth"],
            query_params=_query,
            json=_json,
            cast_to=models.PostOrgAdvisorCodesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetOrgAdvisorCodesResponse:
        """
        Returns a list of all of the advisor codes associated with the application.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/org/advisor-codes",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetOrgAdvisorCodesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def delete(
        self, *, id: int, request_options: typing.Optional[RequestOptions] = None
    ) -> models.Delete:
        """
        Returns the "OK" message and a json object with the id the advisor codes removed, if deletion was successful

        **Note for Advisor Code Mapping in Sandbox Applications**
        To preserve the data integrity of sandbox applications, the advisor code mapping endpoints are read-only
        and requests for creation or deletion of advisor codes will not result in updates to advisor code mappings.
        Sandbox applications can read advisor codes from the `/v2/org/advisor-codes` endpoint, but the changes will not
        be reflected upon updates.

        For production applications, full access is granted to the advisor code mapping endpoints. Creations and removals
        of advisor codes will be applied to the advisor codes mapped to the application.

        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="DELETE",
            path=f"/org/advisor-codes/{id}",
            auth_names=["bearerAuth"],
            cast_to=models.Delete,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAdvisorCodesClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.create_many = AsyncCreateManyClient(base_client=self._base_client)
        self.delete_many = AsyncDeleteManyClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: params.PostOrgAdvisorCodesBody,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostOrgAdvisorCodesResponse:
        """
        Returns the created Advisor Code, if successful.

        **Note for Advisor Code Mapping in Sandbox Applications**
        To preserve the data integrity of sandbox applications, the advisor code mapping endpoints are read-only
        and requests for creation or deletion of advisor codes will not result in updates to advisor code mappings.
        Sandbox applications can read advisor codes from the `/v2/org/advisor-codes` endpoint, but the changes will not
        be reflected upon updates.

        For production applications, full access is granted to the advisor code mapping endpoints. Creations and removals
        of advisor codes will be applied to the advisor codes mapped to the application.

        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        _json = to_encodable(
            item=data, dump_with=params._SerializerPostOrgAdvisorCodesBody
        )
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/org/advisor-codes",
            auth_names=["bearerAuth"],
            query_params=_query,
            json=_json,
            cast_to=models.PostOrgAdvisorCodesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetOrgAdvisorCodesResponse:
        """
        Returns a list of all of the advisor codes associated with the application.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/org/advisor-codes",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetOrgAdvisorCodesResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def delete(
        self, *, id: int, request_options: typing.Optional[RequestOptions] = None
    ) -> models.Delete:
        """
        Returns the "OK" message and a json object with the id the advisor codes removed, if deletion was successful

        **Note for Advisor Code Mapping in Sandbox Applications**
        To preserve the data integrity of sandbox applications, the advisor code mapping endpoints are read-only
        and requests for creation or deletion of advisor codes will not result in updates to advisor code mappings.
        Sandbox applications can read advisor codes from the `/v2/org/advisor-codes` endpoint, but the changes will not
        be reflected upon updates.

        For production applications, full access is granted to the advisor code mapping endpoints. Creations and removals
        of advisor codes will be applied to the advisor codes mapped to the application.

        """
        # start -- build request data (keep comment for code generation)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="DELETE",
            path=f"/org/advisor-codes/{id}",
            auth_names=["bearerAuth"],
            cast_to=models.Delete,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
