"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    RequestOptions,
    to_encodable,
    SyncBaseClient,
    QueryParams,
    encode_param,
    AsyncBaseClient,
    default_request_options,
)
from wealthtech_api.resources.org.firms.filter import FilterClient, AsyncFilterClient
import typing
from wealthtech_api.types.org.firms import params, models


class FirmsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.filter = FilterClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def put(
        self,
        *,
        data: params.Firm,
        id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PutOrgFirmsIdResponse:
        """
        Provide an firm object update. Then entire firm object **must** be provided to the `PUT` request.

        **Editable Fields:**
        - `name`
        - `disclosures`
        - `reporting_frequency`
        - `invoice_header`
        - `invoice_footer`
        - `invoice_from`
        - `invoice_due_date_option`
        - `invoice_include_fee_structures`
        - `invoice_effective_rates`
        - `invoice_annualized_effective_rates`
        - `invoice_show_agreement`
        - `invoice_not_a_bill_explanation`
        - `billing_partition_option`
        - `billing_include_accrued_income`

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerFirm)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="PUT",
            path=f"/org/firms/{id}",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PutOrgFirmsIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetOrgFirmsIdResponse:
        """
        Returns a firm based on a single ID
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/org/firms/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetOrgFirmsIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetOrgFirmsResponse:
        """
        Returns a list of firms within the data field
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/org/firms",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetOrgFirmsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncFirmsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.filter = AsyncFilterClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def put(
        self,
        *,
        data: params.Firm,
        id: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PutOrgFirmsIdResponse:
        """
        Provide an firm object update. Then entire firm object **must** be provided to the `PUT` request.

        **Editable Fields:**
        - `name`
        - `disclosures`
        - `reporting_frequency`
        - `invoice_header`
        - `invoice_footer`
        - `invoice_from`
        - `invoice_due_date_option`
        - `invoice_include_fee_structures`
        - `invoice_effective_rates`
        - `invoice_annualized_effective_rates`
        - `invoice_show_agreement`
        - `invoice_not_a_bill_explanation`
        - `billing_partition_option`
        - `billing_include_accrued_income`

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=params._SerializerFirm)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="PUT",
            path=f"/org/firms/{id}",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PutOrgFirmsIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetOrgFirmsIdResponse:
        """
        Returns a firm based on a single ID
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/org/firms/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetOrgFirmsIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetOrgFirmsResponse:
        """
        Returns a list of firms within the data field
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/org/firms",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetOrgFirmsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
