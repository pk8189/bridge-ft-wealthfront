"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import SyncBaseClient, AsyncBaseClient
from wealthtech_api.resources.reporting.asset_classifications import (
    AssetClassificationsClient,
    AsyncAssetClassificationsClient,
)
from wealthtech_api.resources.reporting.benchmarks import (
    BenchmarksClient,
    AsyncBenchmarksClient,
)
from wealthtech_api.resources.reporting.class_tags import (
    AsyncClassTagsClient,
    ClassTagsClient,
)
from wealthtech_api.resources.reporting.printable_reports import (
    AsyncPrintableReportsClient,
    PrintableReportsClient,
)
from wealthtech_api.resources.reporting.target_allocations import (
    TargetAllocationsClient,
    AsyncTargetAllocationsClient,
)
from wealthtech_api.resources.reporting.households import (
    HouseholdsClient,
    AsyncHouseholdsClient,
)
from wealthtech_api.resources.reporting.report_settings import (
    AsyncReportSettingsClient,
    ReportSettingsClient,
)
from wealthtech_api.resources.reporting.web_reports import (
    WebReportsClient,
    AsyncWebReportsClient,
)


class ReportingClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.asset_classifications = AssetClassificationsClient(
            base_client=self._base_client
        )
        self.benchmarks = BenchmarksClient(base_client=self._base_client)
        self.class_tags = ClassTagsClient(base_client=self._base_client)
        self.printable_reports = PrintableReportsClient(base_client=self._base_client)
        self.target_allocations = TargetAllocationsClient(base_client=self._base_client)
        self.households = HouseholdsClient(base_client=self._base_client)
        self.report_settings = ReportSettingsClient(base_client=self._base_client)
        self.web_reports = WebReportsClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)


class AsyncReportingClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.asset_classifications = AsyncAssetClassificationsClient(
            base_client=self._base_client
        )
        self.benchmarks = AsyncBenchmarksClient(base_client=self._base_client)
        self.class_tags = AsyncClassTagsClient(base_client=self._base_client)
        self.printable_reports = AsyncPrintableReportsClient(
            base_client=self._base_client
        )
        self.target_allocations = AsyncTargetAllocationsClient(
            base_client=self._base_client
        )
        self.households = AsyncHouseholdsClient(base_client=self._base_client)
        self.report_settings = AsyncReportSettingsClient(base_client=self._base_client)
        self.web_reports = AsyncWebReportsClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
