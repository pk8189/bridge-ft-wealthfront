"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    default_request_options,
    SyncBaseClient,
    AsyncBaseClient,
    RequestOptions,
    to_encodable,
)
import typing


class RemapClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Dict[str, typing.Any],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Provide a map keyed on string `account_id` with value of the `household` the `account_id` should be mapped to.

        **Example Request Body:**

        ```json
        {
          "123456": 23,
          "123457": 23,
          "123458": 23,
          "123459": 24,
          "123460": 24,
          "123461": 24
        }
        ```

        The above payload would assign account IDs `123456`, `123457`, and `123458` to `household_id` 23. While the following
        accounts are mapped to `household_id` 24.

        **NOTE:** The `/reporting/households/remap` endpoint does not support removing accounts from households, only mapping accounts to specific households
        or assigning an account from one household to another.

        Alternatively, accounts can be assigned/unassigned households by updating the `household_id` on account(s) records directly via `PUT` requests.

        [Update a single account](https://docs.bridgeft.com/reference/readupdatedaccount-1)
        [Update multiple accounts](https://docs.bridgeft.com/reference/readupdatedaccounts-1)

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=typing.Dict[str, typing.Any])
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/reporting/households/remap",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=typing.Dict[str, typing.Any],
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncRemapClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Dict[str, typing.Any],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Dict[str, typing.Any]:
        """
        Provide a map keyed on string `account_id` with value of the `household` the `account_id` should be mapped to.

        **Example Request Body:**

        ```json
        {
          "123456": 23,
          "123457": 23,
          "123458": 23,
          "123459": 24,
          "123460": 24,
          "123461": 24
        }
        ```

        The above payload would assign account IDs `123456`, `123457`, and `123458` to `household_id` 23. While the following
        accounts are mapped to `household_id` 24.

        **NOTE:** The `/reporting/households/remap` endpoint does not support removing accounts from households, only mapping accounts to specific households
        or assigning an account from one household to another.

        Alternatively, accounts can be assigned/unassigned households by updating the `household_id` on account(s) records directly via `PUT` requests.

        [Update a single account](https://docs.bridgeft.com/reference/readupdatedaccount-1)
        [Update multiple accounts](https://docs.bridgeft.com/reference/readupdatedaccounts-1)

        """
        # start -- build request data (keep comment for code generation)
        _json = to_encodable(item=data, dump_with=typing.Dict[str, typing.Any])
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/reporting/households/remap",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=typing.Dict[str, typing.Any],
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
