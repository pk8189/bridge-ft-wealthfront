"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    SyncBaseClient,
    default_request_options,
    to_encodable,
    AsyncBaseClient,
    RequestOptions,
)
from wealthtech_api.types.oauth2.token_resource import models, params
import typing


class TokenClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)

    # register sync api methods (keep comment for code generation)
    def create(
        self,
        *,
        data: typing.Optional[params.PostOauth2TokenBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Oauth:
        """
        Exchange your application's `client_id` and `client_secret` for a secure JWT Token. Please note that the encoded `username:password` in the Basic Auth request corresponds to `client_id:client_secret`.
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(item=data, dump_with=params._SerializerPostOauth2TokenBody)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="POST",
            path="/oauth2/token",
            auth_names=["basicAuth"],
            data=_data,
            cast_to=models.Oauth,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncTokenClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)

    # register async api methods (keep comment for code generation)
    async def create(
        self,
        *,
        data: typing.Optional[params.PostOauth2TokenBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.Oauth:
        """
        Exchange your application's `client_id` and `client_secret` for a secure JWT Token. Please note that the encoded `username:password` in the Basic Auth request corresponds to `client_id:client_secret`.
        """
        # start -- build request data (keep comment for code generation)
        _data = to_encodable(item=data, dump_with=params._SerializerPostOauth2TokenBody)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="POST",
            path="/oauth2/token",
            auth_names=["basicAuth"],
            data=_data,
            cast_to=models.Oauth,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
