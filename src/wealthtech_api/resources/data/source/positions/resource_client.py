"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    encode_param,
    SyncBaseClient,
    RequestOptions,
    QueryParams,
    AsyncBaseClient,
    default_request_options,
)
from wealthtech_api.resources.data.source.positions.latest import (
    AsyncLatestClient,
    LatestClient,
)
from wealthtech_api.resources.data.source.positions.filter import (
    FilterClient,
    AsyncFilterClient,
)
import typing
from wealthtech_api.types.data.source.positions import models


class PositionsClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.latest = LatestClient(base_client=self._base_client)
        self.filter = FilterClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetDataSourcePositionsIdResponse:
        """
        Returns a position record based on its ID
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/data/source/positions/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetDataSourcePositionsIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        reported_date: str,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        related: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetDataSourcePositionsResponse:
        """
        Returns a list of positions
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["reported_date"] = encode_param(reported_date, False)
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        if related is not None:
            _query["related"] = encode_param(related, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/data/source/positions",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetDataSourcePositionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncPositionsClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.latest = AsyncLatestClient(base_client=self._base_client)
        self.filter = AsyncFilterClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetDataSourcePositionsIdResponse:
        """
        Returns a position record based on its ID
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/data/source/positions/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetDataSourcePositionsIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        reported_date: str,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        related: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetDataSourcePositionsResponse:
        """
        Returns a list of positions
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        _query["reported_date"] = encode_param(reported_date, False)
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        if related is not None:
            _query["related"] = encode_param(related, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/data/source/positions",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetDataSourcePositionsResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
