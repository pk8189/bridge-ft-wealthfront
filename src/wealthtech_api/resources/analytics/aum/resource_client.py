"""File Generated by Sideko (sideko.dev)"""

from wealthtech_api.core import (
    QueryParams,
    default_request_options,
    AsyncBaseClient,
    SyncBaseClient,
    RequestOptions,
    encode_param,
)
from wealthtech_api.resources.analytics.aum.by_account import (
    AsyncByAccountClient,
    ByAccountClient,
)
from wealthtech_api.resources.analytics.aum.by_household import (
    AsyncByHouseholdClient,
    ByHouseholdClient,
)
from wealthtech_api.resources.analytics.aum.filter import (
    FilterClient,
    AsyncFilterClient,
)
from wealthtech_api.resources.analytics.aum.get_aum import (
    AsyncGetAumClient,
    GetAumClient,
)
import typing
import typing_extensions
from wealthtech_api.types.analytics.aum import models


class AumClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client
        # register sync resources (keep comment for code generation)
        self.by_account = ByAccountClient(base_client=self._base_client)
        self.by_household = ByHouseholdClient(base_client=self._base_client)
        self.filter = FilterClient(base_client=self._base_client)
        self.get_aum = GetAumClient(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)
    def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAnalyticsAumIdResponse:
        """
        Returns values of assets under management Firm-wide by ID.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path=f"/analytics/aum/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetAnalyticsAumIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)

    def list(
        self,
        *,
        as_of_date: typing.Optional[str] = None,
        firm_id: typing.Optional[int] = None,
        frequency: typing.Optional[typing_extensions.Literal["D", "M"]] = None,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAnalyticsAumResponse:
        """
        Returns a list of all firm-wide AUM records that have been calculated over-time. Firm-wide AUM is calculated by BridgeFT daily, stored as a resource and accessible over this API. This enables consumers to view firm AUM as a monthly or daily time-series.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if as_of_date is not None:
            _query["as_of_date"] = encode_param(as_of_date, False)
        if firm_id is not None:
            _query["firm_id"] = encode_param(firm_id, False)
        if frequency is not None:
            _query["frequency"] = encode_param(frequency, False)
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send sync request (keep comment for code generation)
        return self._base_client.request(
            method="GET",
            path="/analytics/aum",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetAnalyticsAumResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send sync request (keep comment for code generation)


class AsyncAumClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client
        # register async resources (keep comment for code generation)
        self.by_account = AsyncByAccountClient(base_client=self._base_client)
        self.by_household = AsyncByHouseholdClient(base_client=self._base_client)
        self.filter = AsyncFilterClient(base_client=self._base_client)
        self.get_aum = AsyncGetAumClient(base_client=self._base_client)

    # register async api methods (keep comment for code generation)
    async def get(
        self,
        *,
        id: int,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAnalyticsAumIdResponse:
        """
        Returns values of assets under management Firm-wide by ID.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path=f"/analytics/aum/{id}",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetAnalyticsAumIdResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)

    async def list(
        self,
        *,
        as_of_date: typing.Optional[str] = None,
        firm_id: typing.Optional[int] = None,
        frequency: typing.Optional[typing_extensions.Literal["D", "M"]] = None,
        pager_limit: typing.Optional[int] = None,
        pager_page: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.GetAnalyticsAumResponse:
        """
        Returns a list of all firm-wide AUM records that have been calculated over-time. Firm-wide AUM is calculated by BridgeFT daily, stored as a resource and accessible over this API. This enables consumers to view firm AUM as a monthly or daily time-series.
        """
        # start -- build request data (keep comment for code generation)
        _query: QueryParams = {}
        if as_of_date is not None:
            _query["as_of_date"] = encode_param(as_of_date, False)
        if firm_id is not None:
            _query["firm_id"] = encode_param(firm_id, False)
        if frequency is not None:
            _query["frequency"] = encode_param(frequency, False)
        if pager_limit is not None:
            _query["pager.limit"] = encode_param(pager_limit, False)
        if pager_page is not None:
            _query["pager.page"] = encode_param(pager_page, False)
        # end -- build request data (keep comment for code generation)

        # start -- send async request (keep comment for code generation)
        return await self._base_client.request(
            method="GET",
            path="/analytics/aum",
            auth_names=["bearerAuth"],
            query_params=_query,
            cast_to=models.GetAnalyticsAumResponse,
            request_options=request_options or default_request_options(),
        )
        # end -- send async request (keep comment for code generation)
