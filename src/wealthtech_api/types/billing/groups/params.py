"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostBillingGroupsBodyAssignmentsItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_id: typing_extensions.NotRequired[int]
    fee_location: typing_extensions.NotRequired[int]
    fee_location_option: typing_extensions.NotRequired[str]
    group_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]


class _SerializerPostBillingGroupsBodyAssignmentsItem(pydantic.BaseModel):
    """
    Serializer for PostBillingGroupsBodyAssignmentsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    fee_location: typing.Optional[int] = pydantic.Field(
        alias="fee_location", default=None
    )
    fee_location_option: typing.Optional[str] = pydantic.Field(
        alias="fee_location_option", default=None
    )
    group_id: typing.Optional[int] = pydantic.Field(alias="group_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)


class BillingGroupAssignments(typing_extensions.TypedDict):
    """
    A list of AccountGroupAssignment objects associated with this Billing Group
    """

    account_id: typing_extensions.NotRequired[int]
    fee_location: typing_extensions.NotRequired[int]
    fee_location_option: typing_extensions.NotRequired[
        typing_extensions.Literal["S", "G", "A"]
    ]
    group_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]


class _SerializerBillingGroupAssignments(pydantic.BaseModel):
    """
    Serializer for BillingGroupAssignments handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    fee_location: typing.Optional[int] = pydantic.Field(
        alias="fee_location", default=None
    )
    fee_location_option: typing.Optional[typing_extensions.Literal["S", "G", "A"]] = (
        pydantic.Field(alias="fee_location_option", default=None)
    )
    group_id: typing.Optional[int] = pydantic.Field(alias="group_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)


class PostBillingGroupsBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    assignments: typing_extensions.NotRequired[
        typing.List[PostBillingGroupsBodyAssignmentsItem]
    ]
    firm_id: typing_extensions.NotRequired[int]
    household_id: typing_extensions.NotRequired[int]
    minimum_ids: typing_extensions.NotRequired[typing.List[int]]
    name: typing_extensions.NotRequired[str]
    slug: typing_extensions.NotRequired[str]


class _SerializerPostBillingGroupsBody(pydantic.BaseModel):
    """
    Serializer for PostBillingGroupsBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    assignments: typing.Optional[
        typing.List[_SerializerPostBillingGroupsBodyAssignmentsItem]
    ] = pydantic.Field(alias="assignments", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    household_id: typing.Optional[int] = pydantic.Field(
        alias="household_id", default=None
    )
    minimum_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="minimum_ids", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    slug: typing.Optional[str] = pydantic.Field(alias="slug", default=None)


class BillingGroup(typing_extensions.TypedDict):
    """
    No description specified
    """

    assignments: typing_extensions.NotRequired[BillingGroupAssignments]
    created_at_utc: typing_extensions.NotRequired[str]
    firm_id: typing_extensions.NotRequired[int]
    household_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    minimum_ids: typing_extensions.NotRequired[typing.List[int]]
    name: typing_extensions.NotRequired[str]
    slug: typing_extensions.NotRequired[str]
    updated_at_utc: typing_extensions.NotRequired[str]


class _SerializerBillingGroup(pydantic.BaseModel):
    """
    Serializer for BillingGroup handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    assignments: typing.Optional[_SerializerBillingGroupAssignments] = pydantic.Field(
        alias="assignments", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    household_id: typing.Optional[int] = pydantic.Field(
        alias="household_id", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    minimum_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="minimum_ids", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    slug: typing.Optional[str] = pydantic.Field(alias="slug", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
