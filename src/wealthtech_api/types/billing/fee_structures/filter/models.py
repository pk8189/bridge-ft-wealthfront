"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class FeeStructureTiersItem(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    fee_structure_id: typing.Optional[int] = pydantic.Field(
        alias="fee_structure_id", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    max_balance: typing.Optional[float] = pydantic.Field(
        alias="max_balance", default=None
    )
    min_balance: typing.Optional[float] = pydantic.Field(
        alias="min_balance", default=None
    )
    rate: typing.Optional[float] = pydantic.Field(alias="rate", default=None)


class FeeStructure(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance_type: typing.Optional[typing_extensions.Literal["E", "C", "A", "P"]] = (
        pydantic.Field(alias="balance_type", default=None)
    )
    calculation_type: typing.Optional[str] = pydantic.Field(
        alias="calculation_type", default=None
    )
    collection_type: typing.Optional[
        typing_extensions.Literal["R", "D", "T", "G", "F", "A"]
    ] = pydantic.Field(alias="collection_type", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    created_by_user_id: typing.Optional[int] = pydantic.Field(
        alias="created_by_user_id", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    flat_dollar_fee: typing.Optional[float] = pydantic.Field(
        alias="flat_dollar_fee", default=None
    )
    flat_rate: typing.Optional[float] = pydantic.Field(alias="flat_rate", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "Q"]] = pydantic.Field(
        alias="frequency", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    quarter_cycle: typing.Optional[int] = pydantic.Field(
        alias="quarter_cycle", default=None
    )
    slug: typing.Optional[str] = pydantic.Field(alias="slug", default=None)
    tiers: typing.Optional[typing.List[FeeStructureTiersItem]] = pydantic.Field(
        alias="tiers", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostBillingFeeStructuresFilterResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[FeeStructure]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
