"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostBillingInvoicesFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    annual_debit: typing_extensions.NotRequired[float]
    annual_fee: typing_extensions.NotRequired[float]
    billing_group_id: typing_extensions.NotRequired[int]
    billing_report_id: typing_extensions.NotRequired[int]
    custodian_billed_period_debit: typing_extensions.NotRequired[float]
    direct_billed_period_debit: typing_extensions.NotRequired[float]
    due_date: typing_extensions.NotRequired[str]
    firm_id: typing_extensions.NotRequired[int]
    group_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    is_paid: typing_extensions.NotRequired[bool]
    n_accounts: typing_extensions.NotRequired[int]
    n_fee_structures: typing_extensions.NotRequired[int]
    period_debit: typing_extensions.NotRequired[float]
    snapshot_date: typing_extensions.NotRequired[str]
    total_balance: typing_extensions.NotRequired[float]


class _SerializerPostBillingInvoicesFilterBody(pydantic.BaseModel):
    """
    Serializer for PostBillingInvoicesFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    annual_debit: typing.Optional[float] = pydantic.Field(
        alias="annual_debit", default=None
    )
    annual_fee: typing.Optional[float] = pydantic.Field(
        alias="annual_fee", default=None
    )
    billing_group_id: typing.Optional[int] = pydantic.Field(
        alias="billing_group_id", default=None
    )
    billing_report_id: typing.Optional[int] = pydantic.Field(
        alias="billing_report_id", default=None
    )
    custodian_billed_period_debit: typing.Optional[float] = pydantic.Field(
        alias="custodian_billed_period_debit", default=None
    )
    direct_billed_period_debit: typing.Optional[float] = pydantic.Field(
        alias="direct_billed_period_debit", default=None
    )
    due_date: typing.Optional[str] = pydantic.Field(alias="due_date", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    group_id: typing.Optional[int] = pydantic.Field(alias="group_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_paid: typing.Optional[bool] = pydantic.Field(alias="is_paid", default=None)
    n_accounts: typing.Optional[int] = pydantic.Field(alias="n_accounts", default=None)
    n_fee_structures: typing.Optional[int] = pydantic.Field(
        alias="n_fee_structures", default=None
    )
    period_debit: typing.Optional[float] = pydantic.Field(
        alias="period_debit", default=None
    )
    snapshot_date: typing.Optional[str] = pydantic.Field(
        alias="snapshot_date", default=None
    )
    total_balance: typing.Optional[float] = pydantic.Field(
        alias="total_balance", default=None
    )
