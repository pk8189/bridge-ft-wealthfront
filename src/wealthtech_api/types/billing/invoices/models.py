"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class Invoice(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_cash_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_cash_on_run_date", default=None)
    )
    account_cash_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_cash_on_snapshot_date", default=None)
    )
    account_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="account_df", default=None
    )
    account_fs_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="account_fs_df", default=None
    )
    account_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="account_ids", default=None
    )
    account_value_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_value_on_run_date", default=None)
    )
    account_value_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_value_on_snapshot_date", default=None)
    )
    annual_debit: typing.Optional[float] = pydantic.Field(
        alias="annual_debit", default=None
    )
    annual_fee: typing.Optional[float] = pydantic.Field(
        alias="annual_fee", default=None
    )
    asset_adjustments_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="asset_adjustments_serialized", default=None)
    )
    billing_date: typing.Optional[str] = pydantic.Field(
        alias="billing_date", default=None
    )
    billing_group_id: typing.Optional[int] = pydantic.Field(
        alias="billing_group_id", default=None
    )
    billing_group_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="billing_group_serialized", default=None)
    )
    billing_report_id: typing.Optional[int] = pydantic.Field(
        alias="billing_report_id", default=None
    )
    client_name: typing.Optional[str] = pydantic.Field(
        alias="client_name", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    custodian_billed_period_debit: typing.Optional[float] = pydantic.Field(
        alias="custodian_billed_period_debit", default=None
    )
    direct_billed_period_debit: typing.Optional[float] = pydantic.Field(
        alias="direct_billed_period_debit", default=None
    )
    download_url: typing.Optional[str] = pydantic.Field(
        alias="download_url", default=None
    )
    due_date: typing.Optional[str] = pydantic.Field(alias="due_date", default=None)
    fee_structure_assignments: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="fee_structure_assignments", default=None)
    )
    fee_structure_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="fee_structure_ids", default=None
    )
    fee_structures_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="fee_structures_serialized", default=None)
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    group_cash_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_cash_on_run_date", default=None)
    )
    group_cash_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_cash_on_snapshot_date", default=None)
    )
    group_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="group_df", default=None
    )
    group_id: typing.Optional[int] = pydantic.Field(alias="group_id", default=None)
    group_value_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_value_on_run_date", default=None)
    )
    group_value_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_value_on_snapshot_date", default=None)
    )
    household_id: typing.Optional[int] = pydantic.Field(
        alias="household_id", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_paid: typing.Optional[bool] = pydantic.Field(alias="is_paid", default=None)
    minfee_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="minfee_df", default=None
    )
    minimum_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="minimum_ids", default=None
    )
    n_accounts: typing.Optional[int] = pydantic.Field(alias="n_accounts", default=None)
    n_fee_structures: typing.Optional[int] = pydantic.Field(
        alias="n_fee_structures", default=None
    )
    pdf_state: typing.Optional[str] = pydantic.Field(alias="pdf_state", default=None)
    period_debit: typing.Optional[float] = pydantic.Field(
        alias="period_debit", default=None
    )
    snapshot_date: typing.Optional[str] = pydantic.Field(
        alias="snapshot_date", default=None
    )
    total_balance: typing.Optional[float] = pydantic.Field(
        alias="total_balance", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class GetBillingInvoicesIdResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[Invoice] = pydantic.Field(alias="data", default=None)
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )


class GetBillingInvoicesResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[Invoice]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
