"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class Delete(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)


class BillingReport(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_cash_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_cash_on_run_date", default=None)
    )
    account_cash_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_cash_on_snapshot_date", default=None)
    )
    account_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="account_df", default=None
    )
    account_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="account_ids", default=None
    )
    account_value_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_value_on_run_date", default=None)
    )
    account_value_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="account_value_on_snapshot_date", default=None)
    )
    agg_splits_by_account_df: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="agg_splits_by_account_df", default=None)
    )
    agg_splits_by_group_df: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="agg_splits_by_group_df", default=None)
    )
    agg_splits_by_splitter_df: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="agg_splits_by_splitter_df", default=None)
    )
    annual_debit: typing.Optional[float] = pydantic.Field(
        alias="annual_debit", default=None
    )
    annual_fee: typing.Optional[float] = pydantic.Field(
        alias="annual_fee", default=None
    )
    asset_adjustments_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="asset_adjustments_serialized", default=None)
    )
    aum_on_billing_date: typing.Optional[float] = pydantic.Field(
        alias="aum_on_billing_date", default=None
    )
    billing_date: typing.Optional[str] = pydantic.Field(
        alias="billing_date", default=None
    )
    billing_groups_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="billing_groups_serialized", default=None)
    )
    billing_minimums_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="billing_minimums_serialized", default=None)
    )
    billing_split_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="billing_split_ids", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    created_date: typing.Optional[str] = pydantic.Field(
        alias="created_date", default=None
    )
    created_invoices: typing.Optional[bool] = pydantic.Field(
        alias="created_invoices", default=None
    )
    custodian_billed_period_debit: typing.Optional[float] = pydantic.Field(
        alias="custodian_billed_period_debit", default=None
    )
    direct_billed_period_debit: typing.Optional[float] = pydantic.Field(
        alias="direct_billed_period_debit", default=None
    )
    fee_structure_assignments: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="fee_structure_assignments", default=None)
    )
    fee_structure_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="fee_structure_ids", default=None
    )
    fee_structures_serialized: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="fee_structures_serialized", default=None)
    )
    fee_upload_file_id: typing.Optional[int] = pydantic.Field(
        alias="fee_upload_file_id", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    firm_share: typing.Optional[float] = pydantic.Field(
        alias="firm_share", default=None
    )
    firm_share_annualized: typing.Optional[float] = pydantic.Field(
        alias="firm_share_annualized", default=None
    )
    group_cash_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_cash_on_run_date", default=None)
    )
    group_cash_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_cash_on_snapshot_date", default=None)
    )
    group_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="group_df", default=None
    )
    group_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="group_ids", default=None
    )
    group_value_on_run_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_value_on_run_date", default=None)
    )
    group_value_on_snapshot_date: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="group_value_on_snapshot_date", default=None)
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_firm_wide_billing: typing.Optional[bool] = pydantic.Field(
        alias="is_firm_wide_billing", default=None
    )
    is_rebate_billing: typing.Optional[bool] = pydantic.Field(
        alias="is_rebate_billing", default=None
    )
    minfee_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="minfee_df", default=None
    )
    n_accounts: typing.Optional[int] = pydantic.Field(alias="n_accounts", default=None)
    n_fee_structures: typing.Optional[int] = pydantic.Field(
        alias="n_fee_structures", default=None
    )
    n_groups: typing.Optional[int] = pydantic.Field(alias="n_groups", default=None)
    n_splits: typing.Optional[int] = pydantic.Field(alias="n_splits", default=None)
    period_debit: typing.Optional[float] = pydantic.Field(
        alias="period_debit", default=None
    )
    run_date: typing.Optional[str] = pydantic.Field(alias="run_date", default=None)
    snapshot_date: typing.Optional[str] = pydantic.Field(
        alias="snapshot_date", default=None
    )
    split_assignments: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="split_assignments", default=None
    )
    split_payout: typing.Optional[float] = pydantic.Field(
        alias="split_payout", default=None
    )
    split_payout_annualized: typing.Optional[float] = pydantic.Field(
        alias="split_payout_annualized", default=None
    )
    splits_df: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="splits_df", default=None
    )
    splits_serialized: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="splits_serialized", default=None
    )
    structure_fees_by_group_fs: typing.Optional[typing.Dict[str, typing.Any]] = (
        pydantic.Field(alias="structure_fees_by_group_fs", default=None)
    )
    total_balance: typing.Optional[float] = pydantic.Field(
        alias="total_balance", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class GetBillingReportsIdResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[BillingReport] = pydantic.Field(alias="data", default=None)
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )


class Job(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    created_by_id: typing.Optional[int] = pydantic.Field(
        alias="created_by_id", default=None
    )
    created_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="created_dt_utc", default=None
    )
    current_step: typing.Optional[int] = pydantic.Field(
        alias="current_step", default=None
    )
    email_notification: typing.Optional[str] = pydantic.Field(
        alias="email_notification", default=None
    )
    email_notification_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="email_notification_dt_utc", default=None
    )
    failed_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="failed_dt_utc", default=None
    )
    finished_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="finished_dt_utc", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_failed: typing.Optional[bool] = pydantic.Field(alias="is_failed", default=None)
    is_finished: typing.Optional[bool] = pydantic.Field(
        alias="is_finished", default=None
    )
    is_revoked: typing.Optional[bool] = pydantic.Field(alias="is_revoked", default=None)
    is_running: typing.Optional[bool] = pydantic.Field(alias="is_running", default=None)
    job_type: typing.Optional[typing_extensions.Literal["b", "pdfrp", "db"]] = (
        pydantic.Field(alias="job_type", default=None)
    )
    last_updated_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="last_updated_dt_utc", default=None
    )
    num_steps: typing.Optional[int] = pydantic.Field(alias="num_steps", default=None)
    queued_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="queued_dt_utc", default=None
    )
    started_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="started_dt_utc", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class GetBillingReportsResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[BillingReport]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )


class PostBillingReportsResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[Job] = pydantic.Field(alias="data", default=None)
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
