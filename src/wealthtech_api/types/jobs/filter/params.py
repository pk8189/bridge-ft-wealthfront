"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostJobsFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    created_by_id: typing_extensions.NotRequired[int]
    created_dt_utc: typing_extensions.NotRequired[str]
    current_step: typing_extensions.NotRequired[int]
    email_notification: typing_extensions.NotRequired[str]
    email_notification_dt_utc: typing_extensions.NotRequired[str]
    failed_dt_utc: typing_extensions.NotRequired[str]
    finished_dt_utc: typing_extensions.NotRequired[str]
    firm_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    is_failed: typing_extensions.NotRequired[bool]
    is_finished: typing_extensions.NotRequired[bool]
    is_revoked: typing_extensions.NotRequired[bool]
    is_running: typing_extensions.NotRequired[bool]
    job_type: typing_extensions.NotRequired[
        typing_extensions.Literal["pdfrp", "b", "db"]
    ]
    last_updated_dt_utc: typing_extensions.NotRequired[str]
    num_steps: typing_extensions.NotRequired[int]
    queued_dt_utc: typing_extensions.NotRequired[str]
    started_dt_utc: typing_extensions.NotRequired[str]


class _SerializerPostJobsFilterBody(pydantic.BaseModel):
    """
    Serializer for PostJobsFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    created_by_id: typing.Optional[int] = pydantic.Field(
        alias="created_by_id", default=None
    )
    created_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="created_dt_utc", default=None
    )
    current_step: typing.Optional[int] = pydantic.Field(
        alias="current_step", default=None
    )
    email_notification: typing.Optional[str] = pydantic.Field(
        alias="email_notification", default=None
    )
    email_notification_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="email_notification_dt_utc", default=None
    )
    failed_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="failed_dt_utc", default=None
    )
    finished_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="finished_dt_utc", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_failed: typing.Optional[bool] = pydantic.Field(alias="is_failed", default=None)
    is_finished: typing.Optional[bool] = pydantic.Field(
        alias="is_finished", default=None
    )
    is_revoked: typing.Optional[bool] = pydantic.Field(alias="is_revoked", default=None)
    is_running: typing.Optional[bool] = pydantic.Field(alias="is_running", default=None)
    job_type: typing.Optional[typing_extensions.Literal["db", "pdfrp", "b"]] = (
        pydantic.Field(alias="job_type", default=None)
    )
    last_updated_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="last_updated_dt_utc", default=None
    )
    num_steps: typing.Optional[int] = pydantic.Field(alias="num_steps", default=None)
    queued_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="queued_dt_utc", default=None
    )
    started_dt_utc: typing.Optional[str] = pydantic.Field(
        alias="started_dt_utc", default=None
    )
