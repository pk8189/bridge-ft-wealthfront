"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostDataCustodianSecuritiesFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    broad_code: typing_extensions.NotRequired[str]
    cusip: typing_extensions.NotRequired[str]
    description: typing_extensions.NotRequired[str]
    id: typing_extensions.NotRequired[int]
    issue_code: typing_extensions.NotRequired[str]
    master_asset_class: typing_extensions.NotRequired[
        typing_extensions.Literal["EQ", "CA", "DT", "CR", "UC", "ETF", "CE", "MX"]
    ]
    sic_code: typing_extensions.NotRequired[str]
    symbol_field: typing_extensions.NotRequired[str]


class _SerializerPostDataCustodianSecuritiesFilterBody(pydantic.BaseModel):
    """
    Serializer for PostDataCustodianSecuritiesFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    broad_code: typing.Optional[str] = pydantic.Field(alias="broad_code", default=None)
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    issue_code: typing.Optional[str] = pydantic.Field(alias="issue_code", default=None)
    master_asset_class: typing.Optional[
        typing_extensions.Literal["EQ", "DT", "MX", "CA", "CR", "UC", "CE", "ETF"]
    ] = pydantic.Field(alias="master_asset_class", default=None)
    sic_code: typing.Optional[str] = pydantic.Field(alias="sic_code", default=None)
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
