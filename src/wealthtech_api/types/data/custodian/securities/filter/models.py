"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class Security(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    bond_rating: typing.Optional[str] = pydantic.Field(
        alias="bond_rating", default=None
    )
    broad_code: typing.Optional[str] = pydantic.Field(alias="broad_code", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    expiration_date: typing.Optional[str] = pydantic.Field(
        alias="expiration_date", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    identifier: typing.Optional[str] = pydantic.Field(alias="identifier", default=None)
    issue_type: typing.Optional[str] = pydantic.Field(alias="issue_type", default=None)
    issue_type_code: typing.Optional[int] = pydantic.Field(
        alias="issue_type_code", default=None
    )
    master_asset_class: typing.Optional[
        typing_extensions.Literal["CA", "EQ", "MX", "CE", "CR", "ETF", "UC", "DT"]
    ] = pydantic.Field(alias="master_asset_class", default=None)
    maturity_date: typing.Optional[str] = pydantic.Field(
        alias="maturity_date", default=None
    )
    prefixed_identifier: typing.Optional[typing_extensions.Literal["S", "C"]] = (
        pydantic.Field(alias="prefixed_identifier", default=None)
    )
    security_type: typing.Optional[
        typing_extensions.Literal[
            "Alternative",
            "Cash Equivalent",
            "Option",
            "Cash",
            "Crypto",
            "Stock",
            "Bond",
            "Mutual Fund",
            "Fund",
            "Unknown",
            "ETF",
        ]
    ] = pydantic.Field(alias="security_type", default=None)
    sic_code: typing.Optional[str] = pydantic.Field(alias="sic_code", default=None)
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostDataCustodianSecuritiesFilterResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[Security]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
