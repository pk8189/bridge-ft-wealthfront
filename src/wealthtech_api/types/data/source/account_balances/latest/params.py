"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class GetDataSourceAccountBalancesLatestBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_id: typing_extensions.NotRequired[int]
    account_ids: typing_extensions.NotRequired[typing.List[int]]
    account_number: typing_extensions.NotRequired[str]
    advisor_code: typing_extensions.NotRequired[str]
    cash_value_aggregated: typing_extensions.NotRequired[float]
    cash_value_reported: typing_extensions.NotRequired[float]
    created_at_utc: typing_extensions.NotRequired[str]
    id: typing_extensions.NotRequired[int]
    original_data: typing_extensions.NotRequired[typing.Dict[str, typing.Any]]
    reported_date: typing_extensions.NotRequired[str]
    securities_value_aggregated: typing_extensions.NotRequired[float]
    securities_value_reported: typing_extensions.NotRequired[float]
    source: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "PER",
            "EGB",
            "APX",
            "DST",
            "TDA (Available prior to Sept. 2, 2023)",
            "MLT",
            "TIA",
            "SWB",
            "FPR",
            "NFS",
            "IBK",
        ]
    ]
    total_value_aggregated: typing_extensions.NotRequired[float]
    total_value_reported: typing_extensions.NotRequired[float]


class _SerializerGetDataSourceAccountBalancesLatestBody(pydantic.BaseModel):
    """
    Serializer for GetDataSourceAccountBalancesLatestBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    account_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="account_ids", default=None
    )
    account_number: typing.Optional[str] = pydantic.Field(
        alias="account_number", default=None
    )
    advisor_code: typing.Optional[str] = pydantic.Field(
        alias="advisor_code", default=None
    )
    cash_value_aggregated: typing.Optional[float] = pydantic.Field(
        alias="cash_value_aggregated", default=None
    )
    cash_value_reported: typing.Optional[float] = pydantic.Field(
        alias="cash_value_reported", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    original_data: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="original_data", default=None
    )
    reported_date: typing.Optional[str] = pydantic.Field(
        alias="reported_date", default=None
    )
    securities_value_aggregated: typing.Optional[float] = pydantic.Field(
        alias="securities_value_aggregated", default=None
    )
    securities_value_reported: typing.Optional[float] = pydantic.Field(
        alias="securities_value_reported", default=None
    )
    source: typing.Optional[
        typing_extensions.Literal[
            "APX",
            "DST",
            "NFS",
            "PER",
            "FPR",
            "IBK",
            "SWB",
            "TDA (Available prior to Sept. 2, 2023)",
            "MLT",
            "TIA",
            "EGB",
        ]
    ] = pydantic.Field(alias="source", default=None)
    total_value_aggregated: typing.Optional[float] = pydantic.Field(
        alias="total_value_aggregated", default=None
    )
    total_value_reported: typing.Optional[float] = pydantic.Field(
        alias="total_value_reported", default=None
    )
