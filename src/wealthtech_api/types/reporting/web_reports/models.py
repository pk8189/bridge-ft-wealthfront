"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class Account(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    acct_type: typing.Optional[str] = pydantic.Field(alias="acct_type", default=None)
    address_1: typing.Optional[str] = pydantic.Field(alias="address_1", default=None)
    address_2: typing.Optional[str] = pydantic.Field(alias="address_2", default=None)
    address_3: typing.Optional[str] = pydantic.Field(alias="address_3", default=None)
    advisor_code: typing.Optional[str] = pydantic.Field(
        alias="advisor_code", default=None
    )
    advisor_codes: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="advisor_codes", default=None
    )
    benchmarks_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="benchmarks_ids", default=None
    )
    billing_splits_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="billing_splits_ids", default=None
    )
    buy_securities_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="buy_securities_ids", default=None
    )
    city: typing.Optional[str] = pydantic.Field(alias="city", default=None)
    close_date: typing.Optional[str] = pydantic.Field(alias="close_date", default=None)
    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    custodian: typing.Optional[
        typing_extensions.Literal[
            "APX", "NFS", "SWB", "EGB", "IBK", "DST", "FPR", "MLT", "PER", "TIA"
        ]
    ] = pydantic.Field(alias="custodian", default=None)
    custodian_name: typing.Optional[str] = pydantic.Field(
        alias="custodian_name", default=None
    )
    display_name: typing.Optional[str] = pydantic.Field(
        alias="display_name", default=None
    )
    display_number: typing.Optional[str] = pydantic.Field(
        alias="display_number", default=None
    )
    do_not_buy_securities_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="do_not_buy_securities_ids", default=None
    )
    do_not_sell_securities_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="do_not_sell_securities_ids", default=None
    )
    entity_id: typing.Optional[str] = pydantic.Field(alias="entity_id", default=None)
    fee_structures_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="fee_structures_ids", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    first_billable_date: typing.Optional[str] = pydantic.Field(
        alias="first_billable_date", default=None
    )
    first_cost_basis_date: typing.Optional[str] = pydantic.Field(
        alias="first_cost_basis_date", default=None
    )
    first_funded_date: typing.Optional[str] = pydantic.Field(
        alias="first_funded_date", default=None
    )
    first_papered_date: typing.Optional[str] = pydantic.Field(
        alias="first_papered_date", default=None
    )
    first_performance_date: typing.Optional[str] = pydantic.Field(
        alias="first_performance_date", default=None
    )
    first_positions_date: typing.Optional[str] = pydantic.Field(
        alias="first_positions_date", default=None
    )
    first_quarantine_date: typing.Optional[str] = pydantic.Field(
        alias="first_quarantine_date", default=None
    )
    first_transactions_date: typing.Optional[str] = pydantic.Field(
        alias="first_transactions_date", default=None
    )
    has_custodian_name: typing.Optional[bool] = pydantic.Field(
        alias="has_custodian_name", default=None
    )
    household_id: typing.Optional[int] = pydantic.Field(
        alias="household_id", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    inception_date: typing.Optional[str] = pydantic.Field(
        alias="inception_date", default=None
    )
    investment_model_id: typing.Optional[int] = pydantic.Field(
        alias="investment_model_id", default=None
    )
    is_account: typing.Optional[bool] = pydantic.Field(alias="is_account", default=None)
    is_active: typing.Optional[bool] = pydantic.Field(alias="is_active", default=None)
    is_closed: typing.Optional[bool] = pydantic.Field(alias="is_closed", default=None)
    is_custodian_billed: typing.Optional[bool] = pydantic.Field(
        alias="is_custodian_billed", default=None
    )
    is_direct_billed: typing.Optional[bool] = pydantic.Field(
        alias="is_direct_billed", default=None
    )
    is_household: typing.Optional[bool] = pydantic.Field(
        alias="is_household", default=None
    )
    is_tax_deferred: typing.Optional[bool] = pydantic.Field(
        alias="is_tax_deferred", default=None
    )
    is_taxable: typing.Optional[bool] = pydantic.Field(alias="is_taxable", default=None)
    last_cost_basis_date: typing.Optional[str] = pydantic.Field(
        alias="last_cost_basis_date", default=None
    )
    last_portfolio_data_date: typing.Optional[str] = pydantic.Field(
        alias="last_portfolio_data_date", default=None
    )
    last_positions_date: typing.Optional[str] = pydantic.Field(
        alias="last_positions_date", default=None
    )
    last_reporting_date: typing.Optional[str] = pydantic.Field(
        alias="last_reporting_date", default=None
    )
    last_transactions_date: typing.Optional[str] = pydantic.Field(
        alias="last_transactions_date", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    notes: typing.Optional[str] = pydantic.Field(alias="notes", default=None)
    number: typing.Optional[str] = pydantic.Field(alias="number", default=None)
    payment_source: typing.Optional[typing_extensions.Literal["C", "D"]] = (
        pydantic.Field(alias="payment_source", default=None)
    )
    required_cash: typing.Optional[float] = pydantic.Field(
        alias="required_cash", default=None
    )
    required_cash_frequency: typing.Optional[
        typing_extensions.Literal["M", "Q", "O"]
    ] = pydantic.Field(alias="required_cash_frequency", default=None)
    sell_securities_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="sell_securities_ids", default=None
    )
    short_name: typing.Optional[str] = pydantic.Field(alias="short_name", default=None)
    state: typing.Optional[str] = pydantic.Field(alias="state", default=None)
    status: typing.Optional[
        typing_extensions.Literal["stale", "funded", "papered", "closed"]
    ] = pydantic.Field(alias="status", default=None)
    target_allocation_id: typing.Optional[int] = pydantic.Field(
        alias="target_allocation_id", default=None
    )
    tax_id_token: typing.Optional[str] = pydantic.Field(
        alias="tax_id_token", default=None
    )
    unsupervised_securities_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="unsupervised_securities_ids", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
    zip_code: typing.Optional[str] = pydantic.Field(alias="zip_code", default=None)


class PostReportingWebReportsResponseEntityInfoAccountById(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, Account]


class PostReportingWebReportsResponseEntityInfoAccountNumbersByAccountId(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, str]


class Firm(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    accent_color: typing.Optional[str] = pydantic.Field(
        alias="accent_color", default=None
    )
    billing_include_accrued_income: typing.Optional[bool] = pydantic.Field(
        alias="billing_include_accrued_income", default=None
    )
    billing_partition_option: typing.Optional[
        typing_extensions.Literal["Q", "M", "Y", "D", "W"]
    ] = pydantic.Field(alias="billing_partition_option", default=None)
    brand_colors: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="brand_colors", default=None
    )
    cp_enabled: typing.Optional[bool] = pydantic.Field(alias="cp_enabled", default=None)
    cp_heldaways_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_heldaways_enabled", default=None
    )
    cp_invoices_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_invoices_enabled", default=None
    )
    cp_printable_reports_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_printable_reports_enabled", default=None
    )
    cp_shared_files_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_shared_files_enabled", default=None
    )
    cp_web_reports_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_web_reports_enabled", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    disclosures: typing.Optional[str] = pydantic.Field(
        alias="disclosures", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    invoice_annualized_effective_rates: typing.Optional[bool] = pydantic.Field(
        alias="invoice_annualized_effective_rates", default=None
    )
    invoice_due_date_option: typing.Optional[typing_extensions.Literal["30", "E"]] = (
        pydantic.Field(alias="invoice_due_date_option", default=None)
    )
    invoice_effective_rates: typing.Optional[bool] = pydantic.Field(
        alias="invoice_effective_rates", default=None
    )
    invoice_footer: typing.Optional[str] = pydantic.Field(
        alias="invoice_footer", default=None
    )
    invoice_from: typing.Optional[str] = pydantic.Field(
        alias="invoice_from", default=None
    )
    invoice_header: typing.Optional[str] = pydantic.Field(
        alias="invoice_header", default=None
    )
    invoice_include_fee_structures: typing.Optional[bool] = pydantic.Field(
        alias="invoice_include_fee_structures", default=None
    )
    invoice_not_a_bill_explanation: typing.Optional[bool] = pydantic.Field(
        alias="invoice_not_a_bill_explanation", default=None
    )
    invoice_show_agreement: typing.Optional[bool] = pydantic.Field(
        alias="invoice_show_agreement", default=None
    )
    is_active: typing.Optional[bool] = pydantic.Field(alias="is_active", default=None)
    is_billing_active: typing.Optional[bool] = pydantic.Field(
        alias="is_billing_active", default=None
    )
    logo_url: typing.Optional[str] = pydantic.Field(alias="logo_url", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    parent_firm_id: typing.Optional[int] = pydantic.Field(
        alias="parent_firm_id", default=None
    )
    permissions: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="permissions", default=None
    )
    primary_color: typing.Optional[str] = pydantic.Field(
        alias="primary_color", default=None
    )
    relationship_code: typing.Optional[str] = pydantic.Field(
        alias="relationship_code", default=None
    )
    report_on_heldaway_accounts: typing.Optional[bool] = pydantic.Field(
        alias="report_on_heldaway_accounts", default=None
    )
    reporting_frequency: typing.Optional[
        typing_extensions.Literal["M", "D", "Q", "W", "Y"]
    ] = pydantic.Field(alias="reporting_frequency", default=None)
    short_name: typing.Optional[str] = pydantic.Field(alias="short_name", default=None)
    show_bridge_logo: typing.Optional[bool] = pydantic.Field(
        alias="show_bridge_logo", default=None
    )
    show_firm_logo: typing.Optional[bool] = pydantic.Field(
        alias="show_firm_logo", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class Household(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmarks_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="benchmarks_ids", default=None
    )
    close_date: typing.Optional[str] = pydantic.Field(alias="close_date", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    entity_id: typing.Optional[str] = pydantic.Field(alias="entity_id", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    first_account_reporting_date: typing.Optional[str] = pydantic.Field(
        alias="first_account_reporting_date", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    inception_date: typing.Optional[str] = pydantic.Field(
        alias="inception_date", default=None
    )
    is_account: typing.Optional[bool] = pydantic.Field(alias="is_account", default=None)
    is_household: typing.Optional[bool] = pydantic.Field(
        alias="is_household", default=None
    )
    last_account_reporting_date: typing.Optional[str] = pydantic.Field(
        alias="last_account_reporting_date", default=None
    )
    last_reporting_date: typing.Optional[str] = pydantic.Field(
        alias="last_reporting_date", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    opening_date: typing.Optional[str] = pydantic.Field(
        alias="opening_date", default=None
    )
    short_name: typing.Optional[str] = pydantic.Field(alias="short_name", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostReportingWebReportsResponseEntityInfoManualAccountsById(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[str, Account]


class PostReportingWebReportsResponseInput(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    end: typing.Optional[str] = pydantic.Field(alias="end", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    household_id: typing.Optional[int] = pydantic.Field(
        alias="household_id", default=None
    )
    standard_period_frequency: typing.Optional[int] = pydantic.Field(
        alias="standard_period_frequency", default=None
    )
    standard_period_month: typing.Optional[int] = pydantic.Field(
        alias="standard_period_month", default=None
    )
    standard_period_year: typing.Optional[int] = pydantic.Field(
        alias="standard_period_year", default=None
    )
    start: typing.Optional[str] = pydantic.Field(alias="start", default=None)
    sub_reports: typing.Optional[
        typing.List[
            typing_extensions.Literal[
                "portfolio_snapshot",
                "management_fees",
                "performance_chart",
                "risk_return_chart",
                "performance_summary",
                "appraisals_wo_cost_basis",
                "account_summary",
                "security_performance",
                "income",
                "allocation_and_performance_summary",
                "realized_gain_loss",
                "deposits_withdrawals",
                "target_vs_actual_allocation",
                "household_performance_attribution",
                "appraisals",
                "net_investment_chart",
                "asset_allocation_top_holdings",
                "benchmark_perf_summary",
                "consolidated_summary",
                "buy_sells",
            ]
        ]
    ] = pydantic.Field(alias="sub_reports", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryBenchmarkPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_id: typing.Optional[str] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryInception(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryLatestPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryPeriod(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryAllocationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    master_asset_class: typing.Optional[
        typing_extensions.Literal["ETF", "EQ", "MX", "DT", "CR", "CE", "UC", "CA"]
    ] = pydantic.Field(alias="master_asset_class", default=None)
    total_value: typing.Optional[float] = pydantic.Field(
        alias="total_value", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryBenchmarkPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_id: typing.Optional[str] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryLatestPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryPortfolioSummary(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalByCacAdditionalPropsHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalByCacAdditionalPropsSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacCaHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalByMacCaSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacDtHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalByMacDtSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacEqHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalByMacEqSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacMxHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalByMacMxSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalCashSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalEquityAppraisalHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalEquityAppraisalSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalFixedIncomeAppraisalHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalFixedIncomeAppraisalSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalMoneyMarketAppraisalHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalMoneyMarketAppraisalSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalOtherAppraisalHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="abs_purchase_cost", default=None
    )
    cac_tag_name: typing.Optional[str] = pydantic.Field(
        alias="cac_tag_name", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    estimated_annual_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_annual_income", default=None
    )
    has_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="has_cost_basis", default=None
    )
    market_unit_price: typing.Optional[float] = pydantic.Field(
        alias="market_unit_price", default=None
    )
    master_asset_class: typing.Optional[str] = pydantic.Field(
        alias="master_asset_class", default=None
    )
    purchase_cost_unit_price: typing.Optional[float] = pydantic.Field(
        alias="purchase_cost_unit_price", default=None
    )
    purchase_date: typing.Optional[str] = pydantic.Field(
        alias="purchase_date", default=None
    )
    qty: typing.Optional[float] = pydantic.Field(alias="qty", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    security_yield: typing.Optional[float] = pydantic.Field(
        alias="security_yield", default=None
    )
    security_yield_percent: typing.Optional[float] = pydantic.Field(
        alias="security_yield_percent", default=None
    )
    signed_purchase_cost: typing.Optional[float] = pydantic.Field(
        alias="signed_purchase_cost", default=None
    )
    signed_units: typing.Optional[float] = pydantic.Field(
        alias="signed_units", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataAppraisalOtherAppraisalSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalPortfolioTotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cost: typing.Optional[float] = pydantic.Field(alias="cost", default=None)
    estimated_income: typing.Optional[float] = pydantic.Field(
        alias="estimated_income", default=None
    )
    unrealized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="unrealized_gain_loss", default=None
    )
    unrealized_return: typing.Optional[float] = pydantic.Field(
        alias="unrealized_return", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)
    yield_field: typing.Optional[float] = pydantic.Field(alias="yield", default=None)


class Position(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_closed_units: typing.Optional[float] = pydantic.Field(
        alias="abs_closed_units", default=None
    )
    abs_open_units: typing.Optional[float] = pydantic.Field(
        alias="abs_open_units", default=None
    )
    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    appraised_unit_price: typing.Optional[float] = pydantic.Field(
        alias="appraised_unit_price", default=None
    )
    as_of_date: typing.Optional[str] = pydantic.Field(alias="as_of_date", default=None)
    cost_basis_known: typing.Optional[bool] = pydantic.Field(
        alias="cost_basis_known", default=None
    )
    cost_basis_unit_price: typing.Optional[float] = pydantic.Field(
        alias="cost_basis_unit_price", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    direction: typing.Optional[typing_extensions.Literal["L", "S"]] = pydantic.Field(
        alias="direction", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    lot_id: typing.Optional[int] = pydantic.Field(alias="lot_id", default=None)
    open_date: typing.Optional[str] = pydantic.Field(alias="open_date", default=None)
    origination_date: typing.Optional[str] = pydantic.Field(
        alias="origination_date", default=None
    )
    realized_gain_loss: typing.Optional[float] = pydantic.Field(
        alias="realized_gain_loss", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    security_ledger_id: typing.Optional[int] = pydantic.Field(
        alias="security_ledger_id", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class BuySell(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_amount: typing.Optional[float] = pydantic.Field(
        alias="abs_amount", default=None
    )
    abs_units: typing.Optional[float] = pydantic.Field(alias="abs_units", default=None)
    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    custodian: typing.Optional[
        typing_extensions.Literal[
            "NFS",
            "PER",
            "HDG",
            "SWB",
            "TDA (Available prior to Sept. 2, 2023)",
            "DST",
            "MLT",
        ]
    ] = pydantic.Field(alias="custodian", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_cancel: typing.Optional[bool] = pydantic.Field(alias="is_cancel", default=None)
    meta_data: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="meta_data", default=None
    )
    partition_id: typing.Optional[int] = pydantic.Field(
        alias="partition_id", default=None
    )
    recon_id: typing.Optional[int] = pydantic.Field(alias="recon_id", default=None)
    reported_date: typing.Optional[str] = pydantic.Field(
        alias="reported_date", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    transaction_date: typing.Optional[str] = pydantic.Field(
        alias="transaction_date", default=None
    )
    transaction_fee: typing.Optional[float] = pydantic.Field(
        alias="transaction_fee", default=None
    )
    type: typing.Optional[typing_extensions.Literal["STO", "BTO", "BTC", "STC"]] = (
        pydantic.Field(alias="type", default=None)
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class Security(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    bond_rating: typing.Optional[str] = pydantic.Field(
        alias="bond_rating", default=None
    )
    broad_code: typing.Optional[str] = pydantic.Field(alias="broad_code", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    expiration_date: typing.Optional[str] = pydantic.Field(
        alias="expiration_date", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    identifier: typing.Optional[str] = pydantic.Field(alias="identifier", default=None)
    issue_type: typing.Optional[str] = pydantic.Field(alias="issue_type", default=None)
    issue_type_code: typing.Optional[int] = pydantic.Field(
        alias="issue_type_code", default=None
    )
    master_asset_class: typing.Optional[
        typing_extensions.Literal["MX", "EQ", "DT", "ETF", "CA", "UC", "CE", "CR"]
    ] = pydantic.Field(alias="master_asset_class", default=None)
    maturity_date: typing.Optional[str] = pydantic.Field(
        alias="maturity_date", default=None
    )
    prefixed_identifier: typing.Optional[typing_extensions.Literal["S", "C"]] = (
        pydantic.Field(alias="prefixed_identifier", default=None)
    )
    security_type: typing.Optional[
        typing_extensions.Literal[
            "Cash Equivalent",
            "Crypto",
            "Unknown",
            "Bond",
            "Mutual Fund",
            "Cash",
            "Stock",
            "ETF",
            "Option",
            "Fund",
            "Alternative",
        ]
    ] = pydantic.Field(alias="security_type", default=None)
    sic_code: typing.Optional[str] = pydantic.Field(alias="sic_code", default=None)
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class Transfer(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_units: typing.Optional[float] = pydantic.Field(alias="abs_units", default=None)
    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    cost_basis_known: typing.Optional[bool] = pydantic.Field(
        alias="cost_basis_known", default=None
    )
    cost_basis_unit_price: typing.Optional[float] = pydantic.Field(
        alias="cost_basis_unit_price", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    custodian: typing.Optional[
        typing_extensions.Literal[
            "MLT",
            "HDG",
            "TDA (Available prior to Sept. 2, 2023)",
            "PER",
            "SWB",
            "NFS",
            "DST",
        ]
    ] = pydantic.Field(alias="custodian", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_cancel: typing.Optional[bool] = pydantic.Field(alias="is_cancel", default=None)
    meta_data: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="meta_data", default=None
    )
    origination_date: typing.Optional[str] = pydantic.Field(
        alias="origination_date", default=None
    )
    partition_id: typing.Optional[int] = pydantic.Field(
        alias="partition_id", default=None
    )
    recon_id: typing.Optional[int] = pydantic.Field(alias="recon_id", default=None)
    replaced_transfer_id: typing.Optional[int] = pydantic.Field(
        alias="replaced_transfer_id", default=None
    )
    reported_date: typing.Optional[str] = pydantic.Field(
        alias="reported_date", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    transaction_date: typing.Optional[str] = pydantic.Field(
        alias="transaction_date", default=None
    )
    transaction_fee: typing.Optional[float] = pydantic.Field(
        alias="transaction_fee", default=None
    )
    type: typing.Optional[typing_extensions.Literal["TLC", "WITH", "TLO", "DEP"]] = (
        pydantic.Field(alias="type", default=None)
    )
    unit_price: typing.Optional[float] = pydantic.Field(
        alias="unit_price", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostReportingWebReportsResponseSubReportDataDriftTargetDeviations(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    actual_value: typing.Optional[float] = pydantic.Field(
        alias="actual_value", default=None
    )
    actual_weight: typing.Optional[float] = pydantic.Field(
        alias="actual_weight", default=None
    )
    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    classification_name: typing.Optional[str] = pydantic.Field(
        alias="classification_name", default=None
    )
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    negative_tolerance: typing.Optional[float] = pydantic.Field(
        alias="negative_tolerance", default=None
    )
    percent_diff: typing.Optional[float] = pydantic.Field(
        alias="percent_diff", default=None
    )
    positive_tolerance: typing.Optional[float] = pydantic.Field(
        alias="positive_tolerance", default=None
    )
    target_value: typing.Optional[float] = pydantic.Field(
        alias="target_value", default=None
    )
    target_weight: typing.Optional[float] = pydantic.Field(
        alias="target_weight", default=None
    )
    value_diff: typing.Optional[float] = pydantic.Field(
        alias="value_diff", default=None
    )


class SourceRealizedGainLoss(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_closed_units: typing.Optional[float] = pydantic.Field(
        alias="abs_closed_units", default=None
    )
    abs_closed_value: typing.Optional[float] = pydantic.Field(
        alias="abs_closed_value", default=None
    )
    abs_opened_units: typing.Optional[float] = pydantic.Field(
        alias="abs_opened_units", default=None
    )
    abs_opened_value: typing.Optional[float] = pydantic.Field(
        alias="abs_opened_value", default=None
    )
    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    account_number: typing.Optional[str] = pydantic.Field(
        alias="account_number", default=None
    )
    amount: typing.Optional[float] = pydantic.Field(alias="amount", default=None)
    amount_lt: typing.Optional[float] = pydantic.Field(alias="amount_lt", default=None)
    amount_st: typing.Optional[float] = pydantic.Field(alias="amount_st", default=None)
    close_date: typing.Optional[str] = pydantic.Field(alias="close_date", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    direction: typing.Optional[typing_extensions.Literal["S", "L"]] = pydantic.Field(
        alias="direction", default=None
    )
    feed_code: typing.Optional[str] = pydantic.Field(alias="feed_code", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    lot_identifier: typing.Optional[str] = pydantic.Field(
        alias="lot_identifier", default=None
    )
    lot_selection_method: typing.Optional[str] = pydantic.Field(
        alias="lot_selection_method", default=None
    )
    open_date: typing.Optional[str] = pydantic.Field(alias="open_date", default=None)
    original_data: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="original_data", default=None
    )
    reported_date: typing.Optional[str] = pydantic.Field(
        alias="reported_date", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    settle_date: typing.Optional[str] = pydantic.Field(
        alias="settle_date", default=None
    )
    source: typing.Optional[
        typing_extensions.Literal[
            "SWB",
            "FPR",
            "NFS",
            "TIA",
            "TDA (Available prior to Sept. 2, 2023)",
            "APX",
            "IBK",
            "MLT",
            "PER",
            "DST",
            "EGB",
        ]
    ] = pydantic.Field(alias="source", default=None)
    source_security_cusip: typing.Optional[str] = pydantic.Field(
        alias="source_security_cusip", default=None
    )
    source_security_symbol: typing.Optional[str] = pydantic.Field(
        alias="source_security_symbol", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountSummariesItemInception(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountSummariesItemPeriod(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountValuationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    cash: typing.Optional[float] = pydantic.Field(alias="cash", default=None)
    equity: typing.Optional[float] = pydantic.Field(alias="equity", default=None)
    fixed_income: typing.Optional[float] = pydantic.Field(
        alias="fixed_income", default=None
    )
    other: typing.Optional[float] = pydantic.Field(alias="other", default=None)
    total: typing.Optional[float] = pydantic.Field(alias="total", default=None)
    valuation_from_balance: typing.Optional[bool] = pydantic.Field(
        alias="valuation_from_balance", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryBenchmarkPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_id: typing.Optional[str] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryHeldawayValuationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_mask: typing.Optional[str] = pydantic.Field(
        alias="account_mask", default=None
    )
    account_type: typing.Optional[str] = pydantic.Field(
        alias="account_type", default=None
    )
    balance: typing.Optional[float] = pydantic.Field(alias="balance", default=None)
    institution_name: typing.Optional[str] = pydantic.Field(
        alias="institution_name", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryInception(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryLatestPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryPeriod(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class IncomeExpense(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_amount: typing.Optional[float] = pydantic.Field(
        alias="abs_amount", default=None
    )
    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    custodian: typing.Optional[
        typing_extensions.Literal[
            "TDA (Available prior to Sept. 2, 2023)",
            "HDG",
            "PER",
            "NFS",
            "SWB",
            "DST",
            "MLT",
        ]
    ] = pydantic.Field(alias="custodian", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    is_cancel: typing.Optional[bool] = pydantic.Field(alias="is_cancel", default=None)
    is_outside: typing.Optional[bool] = pydantic.Field(alias="is_outside", default=None)
    is_performance_impact: typing.Optional[bool] = pydantic.Field(
        alias="is_performance_impact", default=None
    )
    is_positive_cash_impact: typing.Optional[bool] = pydantic.Field(
        alias="is_positive_cash_impact", default=None
    )
    meta_data: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        alias="meta_data", default=None
    )
    partition_id: typing.Optional[int] = pydantic.Field(
        alias="partition_id", default=None
    )
    recon_id: typing.Optional[int] = pydantic.Field(alias="recon_id", default=None)
    reported_date: typing.Optional[str] = pydantic.Field(
        alias="reported_date", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    transaction_date: typing.Optional[str] = pydantic.Field(
        alias="transaction_date", default=None
    )
    transaction_fee: typing.Optional[float] = pydantic.Field(
        alias="transaction_fee", default=None
    )
    type: typing.Optional[typing_extensions.Literal["EXP", "INC"]] = pydantic.Field(
        alias="type", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostReportingWebReportsResponseSubReportDataManagementFeeItemsItemLucaIncome(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    income_expense: typing.Optional[IncomeExpense] = pydantic.Field(
        alias="income_expense", default=None
    )
    security: typing.Optional[Security] = pydantic.Field(alias="security", default=None)


class PostReportingWebReportsResponseSubReportDataRiskReturnChartMonthlyRiskReturnDataItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    avg_return: typing.Optional[float] = pydantic.Field(alias="AvgReturn", default=None)
    end_date: typing.Optional[str] = pydantic.Field(alias="EndDate", default=None)
    frequency: typing.Optional[str] = pydantic.Field(alias="Frequency", default=None)
    high_chart_tuple: typing.Optional[typing.List[typing.List[float]]] = pydantic.Field(
        alias="HighChartTuple", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="Name", default=None)
    sharpe_ratio: typing.Optional[float] = pydantic.Field(
        alias="SharpeRatio", default=None
    )
    start_date: typing.Optional[str] = pydantic.Field(alias="StartDate", default=None)
    std_dev: typing.Optional[float] = pydantic.Field(alias="StdDev", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityExclusionsExcludedAssetsSubtotalItemExcludedAssetsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    asset_class: typing.Optional[str] = pydantic.Field(
        alias="asset_class", default=None
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    market_price: typing.Optional[float] = pydantic.Field(
        alias="market_price", default=None
    )
    market_value: typing.Optional[float] = pydantic.Field(
        alias="market_value", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityExclusionsExcludedAssetsSubtotalItemSubtotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    market_value: typing.Optional[float] = pydantic.Field(
        alias="market_value", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityExclusionsSecurityExclusionsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    end_date: typing.Optional[str] = pydantic.Field(alias="end_date", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    percent: typing.Optional[float] = pydantic.Field(alias="percent", default=None)
    security_cusip: typing.Optional[str] = pydantic.Field(
        alias="security_cusip", default=None
    )
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )
    start_date: typing.Optional[str] = pydantic.Field(alias="start_date", default=None)
    units: typing.Optional[float] = pydantic.Field(alias="units", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityExclusionsTotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    market_value: typing.Optional[float] = pydantic.Field(
        alias="market_value", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceBuySellsBySecurityIdAdditionalPropsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    buy_sell: typing.Optional[BuySell] = pydantic.Field(alias="buy_sell", default=None)
    security: typing.Optional[Security] = pydantic.Field(alias="security", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCacAdditionalPropsRowsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCacAdditionalPropsTotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMacDt(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMacEq(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMacMx(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformancePerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    cusip: typing.Optional[str] = pydantic.Field(alias="cusip", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    symbol_field: typing.Optional[str] = pydantic.Field(alias="symbol", default=None)
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceTotal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_market_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_market_value", default=None
    )
    capital_gains: typing.Optional[float] = pydantic.Field(
        alias="capital_gains", default=None
    )
    ending_market_value: typing.Optional[float] = pydantic.Field(
        alias="ending_market_value", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    net_additions: typing.Optional[float] = pydantic.Field(
        alias="net_additions", default=None
    )
    projected_annual_income: typing.Optional[float] = pydantic.Field(
        alias="projected_annual_income", default=None
    )
    total_return: typing.Optional[float] = pydantic.Field(
        alias="total_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceTransfersBySecurityIdAdditionalPropsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    security: typing.Optional[Security] = pydantic.Field(alias="security", default=None)
    transfer: typing.Optional[Transfer] = pydantic.Field(alias="transfer", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryBenchmarkPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_id: typing.Optional[str] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryInception(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryLatestPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryPeriod(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAllocationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    master_asset_class: typing.Optional[
        typing_extensions.Literal["CE", "CA", "MX", "CR", "UC", "ETF", "DT", "EQ"]
    ] = pydantic.Field(alias="master_asset_class", default=None)
    total_value: typing.Optional[float] = pydantic.Field(
        alias="total_value", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotBenchmarkPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_id: typing.Optional[str] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountSummariesItemInception(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountSummariesItemPeriod(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountValuationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    cash: typing.Optional[float] = pydantic.Field(alias="cash", default=None)
    equity: typing.Optional[float] = pydantic.Field(alias="equity", default=None)
    fixed_income: typing.Optional[float] = pydantic.Field(
        alias="fixed_income", default=None
    )
    other: typing.Optional[float] = pydantic.Field(alias="other", default=None)
    total: typing.Optional[float] = pydantic.Field(alias="total", default=None)
    valuation_from_balance: typing.Optional[bool] = pydantic.Field(
        alias="valuation_from_balance", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryBenchmarkPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_id: typing.Optional[str] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryHeldawayValuationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_mask: typing.Optional[str] = pydantic.Field(
        alias="account_mask", default=None
    )
    account_type: typing.Optional[str] = pydantic.Field(
        alias="account_type", default=None
    )
    balance: typing.Optional[float] = pydantic.Field(alias="balance", default=None)
    institution_name: typing.Optional[str] = pydantic.Field(
        alias="institution_name", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryInception(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryLatestPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryPerformanceItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryPeriod(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_balance: typing.Optional[float] = pydantic.Field(
        alias="beginning_balance", default=None
    )
    beginning_balance_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_balance_date", default=None
    )
    contributions: typing.Optional[float] = pydantic.Field(
        alias="contributions", default=None
    )
    ending_balance: typing.Optional[float] = pydantic.Field(
        alias="ending_balance", default=None
    )
    ending_balance_date: typing.Optional[str] = pydantic.Field(
        alias="ending_balance_date", default=None
    )
    income: typing.Optional[float] = pydantic.Field(alias="income", default=None)
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contributions: typing.Optional[float] = pydantic.Field(
        alias="net_contributions", default=None
    )
    withdrawals: typing.Optional[float] = pydantic.Field(
        alias="withdrawals", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBalancePointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartCumulativeContributionPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartInceptionReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartPeriodReturnPointsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    time_field: typing.Optional[str] = pydantic.Field(alias="time", default=None)
    value: typing.Optional[float] = pydantic.Field(alias="value", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotLatestPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    date: typing.Optional[str] = pydantic.Field(alias="date", default=None)
    five_yr_return: typing.Optional[float] = pydantic.Field(
        alias="five_yr_return", default=None
    )
    is_custom_period: typing.Optional[bool] = pydantic.Field(
        alias="is_custom_period", default=None
    )
    itd_return: typing.Optional[float] = pydantic.Field(
        alias="itd_return", default=None
    )
    ltm_return: typing.Optional[float] = pydantic.Field(
        alias="ltm_return", default=None
    )
    mtd_return: typing.Optional[float] = pydantic.Field(
        alias="mtd_return", default=None
    )
    ptd_return: typing.Optional[float] = pydantic.Field(
        alias="ptd_return", default=None
    )
    qtd_return: typing.Optional[float] = pydantic.Field(
        alias="qtd_return", default=None
    )
    series_id: typing.Optional[str] = pydantic.Field(alias="series_id", default=None)
    three_yr_return: typing.Optional[float] = pydantic.Field(
        alias="three_yr_return", default=None
    )
    ytd_return: typing.Optional[float] = pydantic.Field(
        alias="ytd_return", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotSummaryItd(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_value", default=None
    )
    ending_value: typing.Optional[float] = pydantic.Field(
        alias="ending_value", default=None
    )
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contribution: typing.Optional[float] = pydantic.Field(
        alias="net_contribution", default=None
    )
    net_return: typing.Optional[float] = pydantic.Field(
        alias="net_return", default=None
    )
    total_income: typing.Optional[float] = pydantic.Field(
        alias="total_income", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotSummaryLtm(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_value", default=None
    )
    ending_value: typing.Optional[float] = pydantic.Field(
        alias="ending_value", default=None
    )
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contribution: typing.Optional[float] = pydantic.Field(
        alias="net_contribution", default=None
    )
    net_return: typing.Optional[float] = pydantic.Field(
        alias="net_return", default=None
    )
    total_income: typing.Optional[float] = pydantic.Field(
        alias="total_income", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotSummaryQtd(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_value", default=None
    )
    ending_value: typing.Optional[float] = pydantic.Field(
        alias="ending_value", default=None
    )
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contribution: typing.Optional[float] = pydantic.Field(
        alias="net_contribution", default=None
    )
    net_return: typing.Optional[float] = pydantic.Field(
        alias="net_return", default=None
    )
    total_income: typing.Optional[float] = pydantic.Field(
        alias="total_income", default=None
    )


class PostReportingWebReportsResponseSubReportDataSnapshotSummaryYtd(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    beginning_value: typing.Optional[float] = pydantic.Field(
        alias="beginning_value", default=None
    )
    ending_value: typing.Optional[float] = pydantic.Field(
        alias="ending_value", default=None
    )
    manual_account_outside_income: typing.Optional[float] = pydantic.Field(
        alias="manual_account_outside_income", default=None
    )
    net_appreciation: typing.Optional[float] = pydantic.Field(
        alias="net_appreciation", default=None
    )
    net_contribution: typing.Optional[float] = pydantic.Field(
        alias="net_contribution", default=None
    )
    net_return: typing.Optional[float] = pydantic.Field(
        alias="net_return", default=None
    )
    total_income: typing.Optional[float] = pydantic.Field(
        alias="total_income", default=None
    )


class PostReportingWebReportsResponseSubReportDataTopHoldingAllocationsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    master_asset_class: typing.Optional[
        typing_extensions.Literal["DT", "CA", "UC", "ETF", "EQ", "CR", "CE", "MX"]
    ] = pydantic.Field(alias="master_asset_class", default=None)
    total_value: typing.Optional[float] = pydantic.Field(
        alias="total_value", default=None
    )
    weight_percent: typing.Optional[float] = pydantic.Field(
        alias="weight_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataTopHoldingHoldingsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    abs_units: typing.Optional[float] = pydantic.Field(alias="abs_units", default=None)
    abs_value: typing.Optional[float] = pydantic.Field(alias="abs_value", default=None)
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    is_cash_or_equivalent: typing.Optional[bool] = pydantic.Field(
        alias="is_cash_or_equivalent", default=None
    )
    signed_value: typing.Optional[float] = pydantic.Field(
        alias="signed_value", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class PostReportingWebReportsResponseEntityInfo(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    account_by_id: typing.Optional[
        PostReportingWebReportsResponseEntityInfoAccountById
    ] = pydantic.Field(alias="account_by_id", default=None)
    account_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="account_ids", default=None
    )
    account_numbers: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="account_numbers", default=None
    )
    account_numbers_by_account_id: typing.Optional[
        PostReportingWebReportsResponseEntityInfoAccountNumbersByAccountId
    ] = pydantic.Field(alias="account_numbers_by_account_id", default=None)
    accounts: typing.Optional[typing.List[Account]] = pydantic.Field(
        alias="accounts", default=None
    )
    firm: typing.Optional[Firm] = pydantic.Field(alias="firm", default=None)
    household: typing.Optional[Household] = pydantic.Field(
        alias="household", default=None
    )
    manual_accounts: typing.Optional[typing.List[Account]] = pydantic.Field(
        alias="manual_accounts", default=None
    )
    manual_accounts_by_id: typing.Optional[
        PostReportingWebReportsResponseEntityInfoManualAccountsById
    ] = pydantic.Field(alias="manual_accounts_by_id", default=None)
    non_manual_account_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="non_manual_account_ids", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummary(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    allocations: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryAllocationsItem
        ]
    ] = pydantic.Field(alias="allocations", default=None)
    allocations_total_value: typing.Optional[float] = pydantic.Field(
        alias="allocations_total_value", default=None
    )
    allocations_total_weight: typing.Optional[float] = pydantic.Field(
        alias="allocations_total_weight", default=None
    )
    benchmark_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryBenchmarkPerformance
    ] = pydantic.Field(alias="benchmark_performance", default=None)
    latest_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryLatestPerformance
    ] = pydantic.Field(alias="latest_performance", default=None)
    portfolio_summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummaryPortfolioSummary
    ] = pydantic.Field(alias="portfolio_summary", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByCacAdditionalProps(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalByCacAdditionalPropsHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByCacAdditionalPropsSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacCa(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalByMacCaHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacCaSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacDt(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalByMacDtHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacDtSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacEq(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalByMacEqHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacEqSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByMacMx(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalByMacMxHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacMxSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalCash(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    currency: typing.Optional[float] = pydantic.Field(alias="currency", default=None)
    currency_weight: typing.Optional[float] = pydantic.Field(
        alias="currency_weight", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalCashSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalEquityAppraisal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalEquityAppraisalHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalEquityAppraisalSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalFixedIncomeAppraisal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalFixedIncomeAppraisalHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalFixedIncomeAppraisalSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalMoneyMarketAppraisal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalMoneyMarketAppraisalHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalMoneyMarketAppraisalSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalOtherAppraisal(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    cac: typing.Optional[str] = pydantic.Field(alias="cac", default=None)
    holdings: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAppraisalOtherAppraisalHoldingsItem
        ]
    ] = pydantic.Field(alias="holdings", default=None)
    mac: typing.Optional[str] = pydantic.Field(alias="mac", default=None)
    ordered_holdings: typing.Optional[typing.Any] = pydantic.Field(
        alias="ordered_holdings", default=None
    )
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalOtherAppraisalSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)


class PostReportingWebReportsResponseSubReportDataBuysellItemsItemLucaBuySells(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    buy_sell: typing.Optional[BuySell] = pydantic.Field(alias="buy_sell", default=None)
    security: typing.Optional[Security] = pydantic.Field(alias="security", default=None)


class PostReportingWebReportsResponseSubReportDataDepositWithdrawalItemsItemLucaDepositsWithdrawals(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    security: typing.Optional[Security] = pydantic.Field(alias="security", default=None)
    transfer: typing.Optional[Transfer] = pydantic.Field(alias="transfer", default=None)


class PostReportingWebReportsResponseSubReportDataDrift(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    target_allocation_name: typing.Optional[str] = pydantic.Field(
        alias="target_allocation_name", default=None
    )
    target_deviations: typing.Optional[
        PostReportingWebReportsResponseSubReportDataDriftTargetDeviations
    ] = pydantic.Field(alias="target_deviations", default=None)


class PostReportingWebReportsResponseSubReportDataGainlossItemsItem(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    luca_gain_loss: typing.Optional[SourceRealizedGainLoss] = pydantic.Field(
        alias="luca_gain_loss", default=None
    )
    return_field: typing.Optional[float] = pydantic.Field(alias="return", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    security_symbol: typing.Optional[str] = pydantic.Field(
        alias="security_symbol", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountSummariesItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    inception: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountSummariesItemInception
    ] = pydantic.Field(alias="inception", default=None)
    period: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountSummariesItemPeriod
    ] = pydantic.Field(alias="period", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataIncomeExpenseItemsItemLucaIncome(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    income_expense: typing.Optional[IncomeExpense] = pydantic.Field(
        alias="income_expense", default=None
    )
    security: typing.Optional[Security] = pydantic.Field(alias="security", default=None)


class PostReportingWebReportsResponseSubReportDataManagementFeeItemsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    luca_income: typing.Optional[
        PostReportingWebReportsResponseSubReportDataManagementFeeItemsItemLucaIncome
    ] = pydantic.Field(alias="luca_income", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    transaction_type_display: typing.Optional[
        typing_extensions.Literal[
            "Other",
            "Dividend",
            "Interest",
            "Tax",
            "Income",
            "Management Fee",
            "Expense",
        ]
    ] = pydantic.Field(alias="transaction_type_display", default=None)


class PostReportingWebReportsResponseSubReportDataRiskReturnChart(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    inception_date: typing.Optional[str] = pydantic.Field(
        alias="inception_date", default=None
    )
    monthly_risk_return_data: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataRiskReturnChartMonthlyRiskReturnDataItem
        ]
    ] = pydantic.Field(alias="monthly_risk_return_data", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityExclusionsExcludedAssetsSubtotalItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    asset_class: typing.Optional[str] = pydantic.Field(
        alias="asset_class", default=None
    )
    excluded_assets: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityExclusionsExcludedAssetsSubtotalItemExcludedAssetsItem
        ]
    ] = pydantic.Field(alias="excluded_assets", default=None)
    subtotal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityExclusionsExcludedAssetsSubtotalItemSubtotal
    ] = pydantic.Field(alias="subtotal", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceBuySellsBySecurityId(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[
        str,
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityPerformanceBuySellsBySecurityIdAdditionalPropsItem
        ],
    ]


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCacAdditionalProps(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    rows: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCacAdditionalPropsRowsItem
        ]
    ] = pydantic.Field(alias="rows", default=None)
    title: typing.Optional[str] = pydantic.Field(alias="title", default=None)
    total: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCacAdditionalPropsTotal
    ] = pydantic.Field(alias="total", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMac(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    dt: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMacDt
    ] = pydantic.Field(alias="DT", default=None)
    eq: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMacEq
    ] = pydantic.Field(alias="EQ", default=None)
    mx: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMacMx
    ] = pydantic.Field(alias="MX", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceTransfersBySecurityId(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[
        str,
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityPerformanceTransfersBySecurityIdAdditionalPropsItem
        ],
    ]


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountSummariesItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account: typing.Optional[Account] = pydantic.Field(alias="account", default=None)
    inception: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountSummariesItemInception
    ] = pydantic.Field(alias="inception", default=None)
    period: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountSummariesItemPeriod
    ] = pydantic.Field(alias="period", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBalance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBalancePointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItemPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartCumulativeContribution(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartCumulativeContributionPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartInceptionReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartInceptionReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartPeriodReturn(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[str] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    points: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartPeriodReturnPointsItem
        ]
    ] = pydantic.Field(alias="points", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    itd: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotSummaryItd
    ] = pydantic.Field(alias="itd", default=None)
    ltm: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotSummaryLtm
    ] = pydantic.Field(alias="ltm", default=None)
    qtd: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotSummaryQtd
    ] = pydantic.Field(alias="qtd", default=None)
    ytd: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotSummaryYtd
    ] = pydantic.Field(alias="ytd", default=None)


class PostReportingWebReportsResponseSubReportDataTopHolding(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    allocations: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataTopHoldingAllocationsItem
        ]
    ] = pydantic.Field(alias="allocations", default=None)
    has_data: typing.Optional[bool] = pydantic.Field(alias="has_data", default=None)
    holdings: typing.Optional[
        typing.List[PostReportingWebReportsResponseSubReportDataTopHoldingHoldingsItem]
    ] = pydantic.Field(alias="holdings", default=None)
    max_latest_date: typing.Optional[str] = pydantic.Field(
        alias="max_latest_date", default=None
    )


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["D", "M", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "M", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisalByCac(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[
        str, PostReportingWebReportsResponseSubReportDataAppraisalByCacAdditionalProps
    ]


class PostReportingWebReportsResponseSubReportDataAppraisalByMac(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    ca: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacCa
    ] = pydantic.Field(alias="CA", default=None)
    dt: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacDt
    ] = pydantic.Field(alias="DT", default=None)
    eq: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacEq
    ] = pydantic.Field(alias="EQ", default=None)
    mx: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMacMx
    ] = pydantic.Field(alias="MX", default=None)


class PostReportingWebReportsResponseSubReportDataBuysellItemsItem(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    luca_buy_sells: typing.Optional[
        PostReportingWebReportsResponseSubReportDataBuysellItemsItemLucaBuySells
    ] = pydantic.Field(alias="luca_buy_sells", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )


class PostReportingWebReportsResponseSubReportDataDepositWithdrawalItemsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    luca_deposits_withdrawals: typing.Optional[
        PostReportingWebReportsResponseSubReportDataDepositWithdrawalItemsItemLucaDepositsWithdrawals
    ] = pydantic.Field(alias="luca_deposits_withdrawals", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )


class PostReportingWebReportsResponseSubReportDataGainloss(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    items: typing.Optional[
        typing.List[PostReportingWebReportsResponseSubReportDataGainlossItemsItem]
    ] = pydantic.Field(alias="items", default=None)
    total_amount: typing.Optional[float] = pydantic.Field(
        alias="total_amount", default=None
    )
    total_cost: typing.Optional[float] = pydantic.Field(
        alias="total_cost", default=None
    )
    total_proceeds: typing.Optional[float] = pydantic.Field(
        alias="total_proceeds", default=None
    )
    total_return_percent: typing.Optional[float] = pydantic.Field(
        alias="total_return_percent", default=None
    )


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "M", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["D", "W", "M"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "D", "M"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataIncomeExpenseItemsItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    luca_income: typing.Optional[
        PostReportingWebReportsResponseSubReportDataIncomeExpenseItemsItemLucaIncome
    ] = pydantic.Field(alias="luca_income", default=None)
    security_description: typing.Optional[str] = pydantic.Field(
        alias="security_description", default=None
    )
    transaction_type_display: typing.Optional[
        typing_extensions.Literal[
            "Dividend",
            "Income",
            "Other",
            "Tax",
            "Expense",
            "Management Fee",
            "Interest",
        ]
    ] = pydantic.Field(alias="transaction_type_display", default=None)


class PostReportingWebReportsResponseSubReportDataManagementFee(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    items: typing.Optional[
        typing.List[PostReportingWebReportsResponseSubReportDataManagementFeeItemsItem]
    ] = pydantic.Field(alias="items", default=None)
    total: typing.Optional[float] = pydantic.Field(alias="total", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityExclusions(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    excluded_assets_subtotal: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityExclusionsExcludedAssetsSubtotalItem
        ]
    ] = pydantic.Field(alias="excluded_assets_subtotal", default=None)
    period_has_data: typing.Optional[bool] = pydantic.Field(
        alias="period_has_data", default=None
    )
    security_exclusions: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityExclusionsSecurityExclusionsItem
        ]
    ] = pydantic.Field(alias="security_exclusions", default=None)
    total: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityExclusionsTotal
    ] = pydantic.Field(alias="total", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCac(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
        extra="allow",
    )
    __pydantic_extra__: typing.Dict[
        str,
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCacAdditionalProps,
    ]


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["D", "W", "M"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "D", "M"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "D", "M"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotChart(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "M", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "W", "D"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["W", "D", "M"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["M", "D", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChart(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBalance
    ] = pydantic.Field(alias="balance", default=None)
    beginning_date: typing.Optional[str] = pydantic.Field(
        alias="beginning_date", default=None
    )
    benchmark_inception_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkInceptionReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_inception_return", default=None)
    benchmark_period_return: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartBenchmarkPeriodReturnItem
        ]
    ] = pydantic.Field(alias="benchmark_period_return", default=None)
    cumulative_contribution: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartCumulativeContribution
    ] = pydantic.Field(alias="cumulative_contribution", default=None)
    frequency: typing.Optional[typing_extensions.Literal["D", "M", "W"]] = (
        pydantic.Field(alias="frequency", default=None)
    )
    inception_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartInceptionReturn
    ] = pydantic.Field(alias="inception_return", default=None)
    period_return: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChartPeriodReturn
    ] = pydantic.Field(alias="period_return", default=None)


class PostReportingWebReportsResponseSubReportDataAccountSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryBenchmarkPerformanceItem
        ]
    ] = pydantic.Field(alias="benchmark_performance", default=None)
    daily_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyItdChart
    ] = pydantic.Field(alias="daily_itd_chart", default=None)
    daily_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryDailyPtdChart
    ] = pydantic.Field(alias="daily_ptd_chart", default=None)
    inception: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryInception
    ] = pydantic.Field(alias="inception", default=None)
    latest_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryLatestPerformance
    ] = pydantic.Field(alias="latest_performance", default=None)
    monthly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyItdChart
    ] = pydantic.Field(alias="monthly_itd_chart", default=None)
    monthly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryMonthlyPtdChart
    ] = pydantic.Field(alias="monthly_ptd_chart", default=None)
    performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataAccountSummaryPerformanceItem
        ]
    ] = pydantic.Field(alias="performance", default=None)
    period: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryPeriod
    ] = pydantic.Field(alias="period", default=None)
    period_has_data: typing.Optional[bool] = pydantic.Field(
        alias="period_has_data", default=None
    )
    weekly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyItdChart
    ] = pydantic.Field(alias="weekly_itd_chart", default=None)
    weekly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummaryWeeklyPtdChart
    ] = pydantic.Field(alias="weekly_ptd_chart", default=None)


class PostReportingWebReportsResponseSubReportDataAppraisal(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    by_cac: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByCac
    ] = pydantic.Field(alias="by_cac", default=None)
    by_mac: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalByMac
    ] = pydantic.Field(alias="by_mac", default=None)
    cash: typing.Optional[PostReportingWebReportsResponseSubReportDataAppraisalCash] = (
        pydantic.Field(alias="cash", default=None)
    )
    equity_appraisal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalEquityAppraisal
    ] = pydantic.Field(alias="equity_appraisal", default=None)
    fixed_income_appraisal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalFixedIncomeAppraisal
    ] = pydantic.Field(alias="fixed_income_appraisal", default=None)
    money_market_appraisal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalMoneyMarketAppraisal
    ] = pydantic.Field(alias="money_market_appraisal", default=None)
    other_appraisal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalOtherAppraisal
    ] = pydantic.Field(alias="other_appraisal", default=None)
    period_has_data: typing.Optional[bool] = pydantic.Field(
        alias="period_has_data", default=None
    )
    portfolio_total: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisalPortfolioTotal
    ] = pydantic.Field(alias="portfolio_total", default=None)
    positions: typing.Optional[typing.List[Position]] = pydantic.Field(
        alias="positions", default=None
    )


class PostReportingWebReportsResponseSubReportDataBuysell(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    items: typing.Optional[
        typing.List[PostReportingWebReportsResponseSubReportDataBuysellItemsItem]
    ] = pydantic.Field(alias="items", default=None)
    total: typing.Optional[float] = pydantic.Field(alias="total", default=None)


class PostReportingWebReportsResponseSubReportDataDepositWithdrawal(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    items: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataDepositWithdrawalItemsItem
        ]
    ] = pydantic.Field(alias="items", default=None)
    total: typing.Optional[float] = pydantic.Field(alias="total", default=None)


class PostReportingWebReportsResponseSubReportDataHouseholdSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountPerformanceItem
        ]
    ] = pydantic.Field(alias="account_performance", default=None)
    account_summaries: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountSummariesItem
        ]
    ] = pydantic.Field(alias="account_summaries", default=None)
    account_valuations: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryAccountValuationsItem
        ]
    ] = pydantic.Field(alias="account_valuations", default=None)
    benchmark_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryBenchmarkPerformanceItem
        ]
    ] = pydantic.Field(alias="benchmark_performance", default=None)
    daily_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyItdChart
    ] = pydantic.Field(alias="daily_itd_chart", default=None)
    daily_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryDailyPtdChart
    ] = pydantic.Field(alias="daily_ptd_chart", default=None)
    heldaway_valuations: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryHeldawayValuationsItem
        ]
    ] = pydantic.Field(alias="heldaway_valuations", default=None)
    inception: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryInception
    ] = pydantic.Field(alias="inception", default=None)
    latest_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryLatestPerformance
    ] = pydantic.Field(alias="latest_performance", default=None)
    monthly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyItdChart
    ] = pydantic.Field(alias="monthly_itd_chart", default=None)
    monthly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryMonthlyPtdChart
    ] = pydantic.Field(alias="monthly_ptd_chart", default=None)
    performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataHouseholdSummaryPerformanceItem
        ]
    ] = pydantic.Field(alias="performance", default=None)
    period: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryPeriod
    ] = pydantic.Field(alias="period", default=None)
    period_has_data: typing.Optional[bool] = pydantic.Field(
        alias="period_has_data", default=None
    )
    weekly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyItdChart
    ] = pydantic.Field(alias="weekly_itd_chart", default=None)
    weekly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummaryWeeklyPtdChart
    ] = pydantic.Field(alias="weekly_ptd_chart", default=None)


class PostReportingWebReportsResponseSubReportDataIncomeExpense(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    items: typing.Optional[
        typing.List[PostReportingWebReportsResponseSubReportDataIncomeExpenseItemsItem]
    ] = pydantic.Field(alias="items", default=None)
    total: typing.Optional[float] = pydantic.Field(alias="total", default=None)


class PostReportingWebReportsResponseSubReportDataSecurityPerformance(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    buy_sells_by_security_id: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceBuySellsBySecurityId
    ] = pydantic.Field(alias="buy_sells_by_security_id", default=None)
    by_cac: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByCac
    ] = pydantic.Field(alias="by_cac", default=None)
    by_mac: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceByMac
    ] = pydantic.Field(alias="by_mac", default=None)
    performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSecurityPerformancePerformanceItem
        ]
    ] = pydantic.Field(alias="performance", default=None)
    total: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceTotal
    ] = pydantic.Field(alias="total", default=None)
    transfers_by_security_id: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformanceTransfersBySecurityId
    ] = pydantic.Field(alias="transfers_by_security_id", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotAccountSummary(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    benchmark_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryBenchmarkPerformanceItem
        ]
    ] = pydantic.Field(alias="benchmark_performance", default=None)
    daily_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyItdChart
    ] = pydantic.Field(alias="daily_itd_chart", default=None)
    daily_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryDailyPtdChart
    ] = pydantic.Field(alias="daily_ptd_chart", default=None)
    inception: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryInception
    ] = pydantic.Field(alias="inception", default=None)
    latest_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryLatestPerformance
    ] = pydantic.Field(alias="latest_performance", default=None)
    monthly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyItdChart
    ] = pydantic.Field(alias="monthly_itd_chart", default=None)
    monthly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryMonthlyPtdChart
    ] = pydantic.Field(alias="monthly_ptd_chart", default=None)
    performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryPerformanceItem
        ]
    ] = pydantic.Field(alias="performance", default=None)
    period: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryPeriod
    ] = pydantic.Field(alias="period", default=None)
    period_has_data: typing.Optional[bool] = pydantic.Field(
        alias="period_has_data", default=None
    )
    weekly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyItdChart
    ] = pydantic.Field(alias="weekly_itd_chart", default=None)
    weekly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummaryWeeklyPtdChart
    ] = pydantic.Field(alias="weekly_ptd_chart", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummary(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountPerformanceItem
        ]
    ] = pydantic.Field(alias="account_performance", default=None)
    account_summaries: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountSummariesItem
        ]
    ] = pydantic.Field(alias="account_summaries", default=None)
    account_valuations: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryAccountValuationsItem
        ]
    ] = pydantic.Field(alias="account_valuations", default=None)
    benchmark_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryBenchmarkPerformanceItem
        ]
    ] = pydantic.Field(alias="benchmark_performance", default=None)
    daily_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyItdChart
    ] = pydantic.Field(alias="daily_itd_chart", default=None)
    daily_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryDailyPtdChart
    ] = pydantic.Field(alias="daily_ptd_chart", default=None)
    heldaway_valuations: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryHeldawayValuationsItem
        ]
    ] = pydantic.Field(alias="heldaway_valuations", default=None)
    inception: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryInception
    ] = pydantic.Field(alias="inception", default=None)
    latest_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryLatestPerformance
    ] = pydantic.Field(alias="latest_performance", default=None)
    monthly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyItdChart
    ] = pydantic.Field(alias="monthly_itd_chart", default=None)
    monthly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryMonthlyPtdChart
    ] = pydantic.Field(alias="monthly_ptd_chart", default=None)
    performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryPerformanceItem
        ]
    ] = pydantic.Field(alias="performance", default=None)
    period: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryPeriod
    ] = pydantic.Field(alias="period", default=None)
    period_has_data: typing.Optional[bool] = pydantic.Field(
        alias="period_has_data", default=None
    )
    weekly_itd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyItdChart
    ] = pydantic.Field(alias="weekly_itd_chart", default=None)
    weekly_ptd_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummaryWeeklyPtdChart
    ] = pydantic.Field(alias="weekly_ptd_chart", default=None)


class PostReportingWebReportsResponseSubReportDataSnapshot(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotAccountSummary
    ] = pydantic.Field(alias="account_summary", default=None)
    allocations: typing.Optional[
        typing.List[PostReportingWebReportsResponseSubReportDataSnapshotAllocationsItem]
    ] = pydantic.Field(alias="allocations", default=None)
    benchmark_performance: typing.Optional[
        typing.List[
            PostReportingWebReportsResponseSubReportDataSnapshotBenchmarkPerformanceItem
        ]
    ] = pydantic.Field(alias="benchmark_performance", default=None)
    chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotChart
    ] = pydantic.Field(alias="chart", default=None)
    household_summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotHouseholdSummary
    ] = pydantic.Field(alias="household-summary", default=None)
    is_household: typing.Optional[bool] = pydantic.Field(
        alias="is_household", default=None
    )
    latest_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotLatestPerformance
    ] = pydantic.Field(alias="latest_performance", default=None)
    max_latest_date: typing.Optional[str] = pydantic.Field(
        alias="max_latest_date", default=None
    )
    show_3_yr: typing.Optional[bool] = pydantic.Field(alias="show_3_yr", default=None)
    show_5_yr: typing.Optional[bool] = pydantic.Field(alias="show_5_yr", default=None)
    summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSnapshotSummary
    ] = pydantic.Field(alias="summary", default=None)


class PostReportingWebReportsResponseSubReportData(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAccountSummary
    ] = pydantic.Field(alias="account_summary", default=None)
    allocation_and_performance_summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAllocationAndPerformanceSummary
    ] = pydantic.Field(alias="allocation_and_performance_summary", default=None)
    appraisal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataAppraisal
    ] = pydantic.Field(alias="appraisal", default=None)
    buysell: typing.Optional[PostReportingWebReportsResponseSubReportDataBuysell] = (
        pydantic.Field(alias="buysell", default=None)
    )
    deposit_withdrawal: typing.Optional[
        PostReportingWebReportsResponseSubReportDataDepositWithdrawal
    ] = pydantic.Field(alias="deposit_withdrawal", default=None)
    drift: typing.Optional[PostReportingWebReportsResponseSubReportDataDrift] = (
        pydantic.Field(alias="drift", default=None)
    )
    gainloss: typing.Optional[PostReportingWebReportsResponseSubReportDataGainloss] = (
        pydantic.Field(alias="gainloss", default=None)
    )
    household_summary: typing.Optional[
        PostReportingWebReportsResponseSubReportDataHouseholdSummary
    ] = pydantic.Field(alias="household_summary", default=None)
    income_expense: typing.Optional[
        PostReportingWebReportsResponseSubReportDataIncomeExpense
    ] = pydantic.Field(alias="income_expense", default=None)
    management_fee: typing.Optional[
        PostReportingWebReportsResponseSubReportDataManagementFee
    ] = pydantic.Field(alias="management_fee", default=None)
    risk_return_chart: typing.Optional[
        PostReportingWebReportsResponseSubReportDataRiskReturnChart
    ] = pydantic.Field(alias="risk_return_chart", default=None)
    security_exclusions: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityExclusions
    ] = pydantic.Field(alias="security_exclusions", default=None)
    security_performance: typing.Optional[
        PostReportingWebReportsResponseSubReportDataSecurityPerformance
    ] = pydantic.Field(alias="security_performance", default=None)
    snapshot: typing.Optional[PostReportingWebReportsResponseSubReportDataSnapshot] = (
        pydantic.Field(alias="snapshot", default=None)
    )
    top_holding: typing.Optional[
        PostReportingWebReportsResponseSubReportDataTopHolding
    ] = pydantic.Field(alias="top_holding", default=None)


class PostReportingWebReportsResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    entity_info: typing.Optional[PostReportingWebReportsResponseEntityInfo] = (
        pydantic.Field(alias="entity_info", default=None)
    )
    input: typing.Optional[PostReportingWebReportsResponseInput] = pydantic.Field(
        alias="input", default=None
    )
    sub_report_data: typing.Optional[PostReportingWebReportsResponseSubReportData] = (
        pydantic.Field(alias="sub_report_data", default=None)
    )
