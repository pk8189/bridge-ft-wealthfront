"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostReportingHouseholdsFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    close_date: typing_extensions.NotRequired[typing.Optional[str]]
    entity_id: typing_extensions.NotRequired[str]
    firm_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    inception_date: typing_extensions.NotRequired[str]
    name: typing_extensions.NotRequired[str]
    opening_date: typing_extensions.NotRequired[str]
    short_name: typing_extensions.NotRequired[str]
    status: typing_extensions.NotRequired[str]


class _SerializerPostReportingHouseholdsFilterBody(pydantic.BaseModel):
    """
    Serializer for PostReportingHouseholdsFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    close_date: typing.Optional[str] = pydantic.Field(alias="close_date", default=None)
    entity_id: typing.Optional[str] = pydantic.Field(alias="entity_id", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    inception_date: typing.Optional[str] = pydantic.Field(
        alias="inception_date", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    opening_date: typing.Optional[str] = pydantic.Field(
        alias="opening_date", default=None
    )
    short_name: typing.Optional[str] = pydantic.Field(alias="short_name", default=None)
    status: typing.Optional[str] = pydantic.Field(alias="status", default=None)
