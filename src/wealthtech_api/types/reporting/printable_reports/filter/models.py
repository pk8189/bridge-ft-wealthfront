"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PrintableReport(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    client_accessible: typing.Optional[bool] = pydantic.Field(
        alias="client_accessible", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    created_by_user_id: typing.Optional[int] = pydantic.Field(
        alias="created_by_user_id", default=None
    )
    download_url: typing.Optional[str] = pydantic.Field(
        alias="download_url", default=None
    )
    dt_utc: typing.Optional[str] = pydantic.Field(alias="dt_utc", default=None)
    end_date: typing.Optional[str] = pydantic.Field(alias="end_date", default=None)
    error_message: typing.Optional[str] = pydantic.Field(
        alias="error_message", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    frequency: typing.Optional[str] = pydantic.Field(alias="frequency", default=None)
    household_id: typing.Optional[int] = pydantic.Field(
        alias="household_id", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    report_date: typing.Optional[str] = pydantic.Field(
        alias="report_date", default=None
    )
    size_bytes: typing.Optional[int] = pydantic.Field(alias="size_bytes", default=None)
    start_date: typing.Optional[str] = pydantic.Field(alias="start_date", default=None)
    state: typing.Optional[str] = pydantic.Field(alias="state", default=None)
    sub_reports: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="sub_reports", default=None
    )
    tags: typing.Optional[typing.List[str]] = pydantic.Field(alias="tags", default=None)
    timestamp_utc: typing.Optional[str] = pydantic.Field(
        alias="timestamp_utc", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostReportingPrintableReportsFilterResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[PrintableReport]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
