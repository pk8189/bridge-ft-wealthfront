"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class ReportSetting(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_summary: typing.Optional[bool] = pydantic.Field(
        alias="account_summary", default=None
    )
    appraisals: typing.Optional[bool] = pydantic.Field(alias="appraisals", default=None)
    appraisals_wo_cost_basis: typing.Optional[bool] = pydantic.Field(
        alias="appraisals_wo_cost_basis", default=None
    )
    asset_allocation_top_holdings: typing.Optional[bool] = pydantic.Field(
        alias="asset_allocation_top_holdings", default=None
    )
    benchmark_perf_summary: typing.Optional[bool] = pydantic.Field(
        alias="benchmark_perf_summary", default=None
    )
    buy_sells: typing.Optional[bool] = pydantic.Field(alias="buy_sells", default=None)
    component: typing.Optional[
        typing_extensions.Literal[
            "advisor_defaults", "client_defaults", "printable", "user"
        ]
    ] = pydantic.Field(alias="component", default=None)
    consolidated_summary: typing.Optional[bool] = pydantic.Field(
        alias="consolidated_summary", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    deposits_withdrawals: typing.Optional[bool] = pydantic.Field(
        alias="deposits_withdrawals", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    household_performance_attribution: typing.Optional[bool] = pydantic.Field(
        alias="household_performance_attribution", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    income: typing.Optional[bool] = pydantic.Field(alias="income", default=None)
    management_fees: typing.Optional[bool] = pydantic.Field(
        alias="management_fees", default=None
    )
    net_investment_chart: typing.Optional[bool] = pydantic.Field(
        alias="net_investment_chart", default=None
    )
    performance_chart: typing.Optional[bool] = pydantic.Field(
        alias="performance_chart", default=None
    )
    performance_summary: typing.Optional[bool] = pydantic.Field(
        alias="performance_summary", default=None
    )
    portfolio_snapshot: typing.Optional[bool] = pydantic.Field(
        alias="portfolio_snapshot", default=None
    )
    realized_gain_loss: typing.Optional[bool] = pydantic.Field(
        alias="realized_gain_loss", default=None
    )
    risk_return_chart: typing.Optional[bool] = pydantic.Field(
        alias="risk_return_chart", default=None
    )
    security_exclusions: typing.Optional[bool] = pydantic.Field(
        alias="security_exclusions", default=None
    )
    security_performance: typing.Optional[bool] = pydantic.Field(
        alias="security_performance", default=None
    )
    target_vs_actual_allocation: typing.Optional[bool] = pydantic.Field(
        alias="target_vs_actual_allocation", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
    user_id: typing.Optional[int] = pydantic.Field(alias="user_id", default=None)


class PostReportingReportSettingsFilterResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[ReportSetting]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
