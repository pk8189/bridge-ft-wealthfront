"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostReportingReportSettingsFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_summary: typing_extensions.NotRequired[bool]
    appraisals: typing_extensions.NotRequired[bool]
    asset_allocation_top_holdings: typing_extensions.NotRequired[bool]
    benchmark_perf_summary: typing_extensions.NotRequired[bool]
    buy_sells: typing_extensions.NotRequired[bool]
    component: typing_extensions.NotRequired[
        typing_extensions.Literal[
            "user", "client_defaults", "printable", "advisor_defaults"
        ]
    ]
    consolidated_summary: typing_extensions.NotRequired[bool]
    deposits_withdrawals: typing_extensions.NotRequired[bool]
    firm_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    income: typing_extensions.NotRequired[bool]
    management_fees: typing_extensions.NotRequired[bool]
    net_investment_chart: typing_extensions.NotRequired[bool]
    performance_chart: typing_extensions.NotRequired[bool]
    performance_summary: typing_extensions.NotRequired[bool]
    portfolio_snapshot: typing_extensions.NotRequired[bool]
    realized_gain_loss: typing_extensions.NotRequired[bool]
    user_id: typing_extensions.NotRequired[typing.Optional[int]]


class _SerializerPostReportingReportSettingsFilterBody(pydantic.BaseModel):
    """
    Serializer for PostReportingReportSettingsFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_summary: typing.Optional[bool] = pydantic.Field(
        alias="account_summary", default=None
    )
    appraisals: typing.Optional[bool] = pydantic.Field(alias="appraisals", default=None)
    asset_allocation_top_holdings: typing.Optional[bool] = pydantic.Field(
        alias="asset_allocation_top_holdings", default=None
    )
    benchmark_perf_summary: typing.Optional[bool] = pydantic.Field(
        alias="benchmark_perf_summary", default=None
    )
    buy_sells: typing.Optional[bool] = pydantic.Field(alias="buy_sells", default=None)
    component: typing.Optional[
        typing_extensions.Literal[
            "advisor_defaults", "user", "client_defaults", "printable"
        ]
    ] = pydantic.Field(alias="component", default=None)
    consolidated_summary: typing.Optional[bool] = pydantic.Field(
        alias="consolidated_summary", default=None
    )
    deposits_withdrawals: typing.Optional[bool] = pydantic.Field(
        alias="deposits_withdrawals", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    income: typing.Optional[bool] = pydantic.Field(alias="income", default=None)
    management_fees: typing.Optional[bool] = pydantic.Field(
        alias="management_fees", default=None
    )
    net_investment_chart: typing.Optional[bool] = pydantic.Field(
        alias="net_investment_chart", default=None
    )
    performance_chart: typing.Optional[bool] = pydantic.Field(
        alias="performance_chart", default=None
    )
    performance_summary: typing.Optional[bool] = pydantic.Field(
        alias="performance_summary", default=None
    )
    portfolio_snapshot: typing.Optional[bool] = pydantic.Field(
        alias="portfolio_snapshot", default=None
    )
    realized_gain_loss: typing.Optional[bool] = pydantic.Field(
        alias="realized_gain_loss", default=None
    )
    user_id: typing.Optional[int] = pydantic.Field(alias="user_id", default=None)
