"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class AccountSummarySourceAccountNumber(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    first_quarantine_date: typing.Optional[str] = pydantic.Field(
        alias="first_quarantine_date", default=None
    )
    n_bals: typing.Optional[int] = pydantic.Field(alias="n_bals", default=None)
    n_lots: typing.Optional[int] = pydantic.Field(alias="n_lots", default=None)
    n_positions: typing.Optional[int] = pydantic.Field(
        alias="n_positions", default=None
    )
    reported_date: typing.Optional[str] = pydantic.Field(
        alias="reported_date", default=None
    )
    source: typing.Optional[
        typing_extensions.Literal[
            "MLT", "TIA", "APX", "DST", "NFS", "SWB", "PER", "IBK", "FPR", "EGB"
        ]
    ] = pydantic.Field(alias="source", default=None)
    status: typing.Optional[
        typing_extensions.Literal["closed", "stale", "papered", "funded"]
    ] = pydantic.Field(alias="status", default=None)


class AccountSummarySource(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_number: typing.Optional[AccountSummarySourceAccountNumber] = pydantic.Field(
        alias="account_number", default=None
    )


class AccountSummary(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    source: typing.Optional[AccountSummarySource] = pydantic.Field(
        alias="source", default=None
    )
