"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PostStatusSourceDataResponseApxBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseApxLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseApxPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseApxRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseApxTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseDstBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseDstLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseDstPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseDstRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseDstTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseEgbBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseEgbLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseEgbPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseEgbRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseEgbTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseFprBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseFprLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseFprPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseFprRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseFprTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseIbkBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseIbkLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseIbkPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseIbkRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseIbkTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseMltBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseMltLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseMltPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseMltRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseMltTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseNfsBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseNfsLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseNfsPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseNfsRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseNfsTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponsePerBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponsePerLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponsePerPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponsePerRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponsePerTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseSwbBalances(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseSwbLots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseSwbPositions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseSwbRealizedGainLosses(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseSwbTransactions(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseTdaAvailablePriorToSept22023Balances(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseTdaAvailablePriorToSept22023Lots(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseTdaAvailablePriorToSept22023Positions(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseTdaAvailablePriorToSept22023RealizedGainLosses(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseTdaAvailablePriorToSept22023Transactions(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    available: typing.Optional[bool] = pydantic.Field(alias="available", default=None)


class PostStatusSourceDataResponseApx(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseApxBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseApxLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseApxPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseApxRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseApxTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseDst(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseDstBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseDstLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseDstPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseDstRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseDstTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseEgb(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseEgbBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseEgbLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseEgbPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseEgbRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseEgbTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseFpr(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseFprBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseFprLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseFprPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseFprRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseFprTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseIbk(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseIbkBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseIbkLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseIbkPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseIbkRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseIbkTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseMlt(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseMltBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseMltLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseMltPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseMltRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseMltTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseNfs(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseNfsBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseNfsLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseNfsPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseNfsRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseNfsTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponsePer(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponsePerBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponsePerLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponsePerPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponsePerRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponsePerTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseSwb(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[PostStatusSourceDataResponseSwbBalances] = pydantic.Field(
        alias="balances", default=None
    )
    lots: typing.Optional[PostStatusSourceDataResponseSwbLots] = pydantic.Field(
        alias="lots", default=None
    )
    positions: typing.Optional[PostStatusSourceDataResponseSwbPositions] = (
        pydantic.Field(alias="positions", default=None)
    )
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseSwbRealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[PostStatusSourceDataResponseSwbTransactions] = (
        pydantic.Field(alias="transactions", default=None)
    )


class PostStatusSourceDataResponseTdaAvailablePriorToSept22023(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    balances: typing.Optional[
        PostStatusSourceDataResponseTdaAvailablePriorToSept22023Balances
    ] = pydantic.Field(alias="balances", default=None)
    lots: typing.Optional[
        PostStatusSourceDataResponseTdaAvailablePriorToSept22023Lots
    ] = pydantic.Field(alias="lots", default=None)
    positions: typing.Optional[
        PostStatusSourceDataResponseTdaAvailablePriorToSept22023Positions
    ] = pydantic.Field(alias="positions", default=None)
    realized_gain_losses: typing.Optional[
        PostStatusSourceDataResponseTdaAvailablePriorToSept22023RealizedGainLosses
    ] = pydantic.Field(alias="realized_gain_losses", default=None)
    transactions: typing.Optional[
        PostStatusSourceDataResponseTdaAvailablePriorToSept22023Transactions
    ] = pydantic.Field(alias="transactions", default=None)


class PostStatusSourceDataResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    apx: typing.Optional[PostStatusSourceDataResponseApx] = pydantic.Field(
        alias="APX", default=None
    )
    dst: typing.Optional[PostStatusSourceDataResponseDst] = pydantic.Field(
        alias="DST", default=None
    )
    egb: typing.Optional[PostStatusSourceDataResponseEgb] = pydantic.Field(
        alias="EGB", default=None
    )
    fpr: typing.Optional[PostStatusSourceDataResponseFpr] = pydantic.Field(
        alias="FPR", default=None
    )
    ibk: typing.Optional[PostStatusSourceDataResponseIbk] = pydantic.Field(
        alias="IBK", default=None
    )
    mlt: typing.Optional[PostStatusSourceDataResponseMlt] = pydantic.Field(
        alias="MLT", default=None
    )
    nfs: typing.Optional[PostStatusSourceDataResponseNfs] = pydantic.Field(
        alias="NFS", default=None
    )
    per: typing.Optional[PostStatusSourceDataResponsePer] = pydantic.Field(
        alias="PER", default=None
    )
    swb: typing.Optional[PostStatusSourceDataResponseSwb] = pydantic.Field(
        alias="SWB", default=None
    )
    tda_available_prior_to_sept_2_2023: typing.Optional[
        PostStatusSourceDataResponseTdaAvailablePriorToSept22023
    ] = pydantic.Field(alias="TDA (Available prior to Sept. 2, 2023)", default=None)
