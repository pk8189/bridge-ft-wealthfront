"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostOrgFirmsFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    billing_include_accrued_income: typing_extensions.NotRequired[bool]
    billing_partition_option: typing_extensions.NotRequired[
        typing_extensions.Literal["D", "Q", "Y", "W", "M"]
    ]
    cp_enabled: typing_extensions.NotRequired[bool]
    cp_heldaways_enabled: typing_extensions.NotRequired[bool]
    cp_invoices_enabled: typing_extensions.NotRequired[bool]
    cp_printable_reports_enabled: typing_extensions.NotRequired[bool]
    cp_shared_files_enabled: typing_extensions.NotRequired[bool]
    cp_web_reports_enabled: typing_extensions.NotRequired[bool]
    disclosures: typing_extensions.NotRequired[typing.Optional[str]]
    id: typing_extensions.NotRequired[int]
    invoice_annualized_effective_rates: typing_extensions.NotRequired[bool]
    invoice_due_date_option: typing_extensions.NotRequired[
        typing.Optional[typing_extensions.Literal["E", "30"]]
    ]
    invoice_effective_rates: typing_extensions.NotRequired[bool]
    invoice_footer: typing_extensions.NotRequired[str]
    invoice_from: typing_extensions.NotRequired[typing.Optional[str]]
    invoice_header: typing_extensions.NotRequired[str]
    invoice_include_fee_structures: typing_extensions.NotRequired[bool]
    invoice_not_a_bill_explanation: typing_extensions.NotRequired[bool]
    invoice_show_agreement: typing_extensions.NotRequired[bool]
    is_active: typing_extensions.NotRequired[bool]
    is_billing_active: typing_extensions.NotRequired[bool]
    logo_url: typing_extensions.NotRequired[str]
    parent_firm_id: typing_extensions.NotRequired[int]
    relationship_code: typing_extensions.NotRequired[str]
    report_on_heldaway_accounts: typing_extensions.NotRequired[bool]
    reporting_frequency: typing_extensions.NotRequired[
        typing_extensions.Literal["Q", "D", "W", "Y", "M"]
    ]
    short_name: typing_extensions.NotRequired[str]
    show_bridge_logo: typing_extensions.NotRequired[bool]
    show_firm_logo: typing_extensions.NotRequired[bool]


class _SerializerPostOrgFirmsFilterBody(pydantic.BaseModel):
    """
    Serializer for PostOrgFirmsFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    billing_include_accrued_income: typing.Optional[bool] = pydantic.Field(
        alias="billing_include_accrued_income", default=None
    )
    billing_partition_option: typing.Optional[
        typing_extensions.Literal["W", "Q", "Y", "D", "M"]
    ] = pydantic.Field(alias="billing_partition_option", default=None)
    cp_enabled: typing.Optional[bool] = pydantic.Field(alias="cp_enabled", default=None)
    cp_heldaways_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_heldaways_enabled", default=None
    )
    cp_invoices_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_invoices_enabled", default=None
    )
    cp_printable_reports_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_printable_reports_enabled", default=None
    )
    cp_shared_files_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_shared_files_enabled", default=None
    )
    cp_web_reports_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_web_reports_enabled", default=None
    )
    disclosures: typing.Optional[str] = pydantic.Field(
        alias="disclosures", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    invoice_annualized_effective_rates: typing.Optional[bool] = pydantic.Field(
        alias="invoice_annualized_effective_rates", default=None
    )
    invoice_due_date_option: typing.Optional[typing_extensions.Literal["30", "E"]] = (
        pydantic.Field(alias="invoice_due_date_option", default=None)
    )
    invoice_effective_rates: typing.Optional[bool] = pydantic.Field(
        alias="invoice_effective_rates", default=None
    )
    invoice_footer: typing.Optional[str] = pydantic.Field(
        alias="invoice_footer", default=None
    )
    invoice_from: typing.Optional[str] = pydantic.Field(
        alias="invoice_from", default=None
    )
    invoice_header: typing.Optional[str] = pydantic.Field(
        alias="invoice_header", default=None
    )
    invoice_include_fee_structures: typing.Optional[bool] = pydantic.Field(
        alias="invoice_include_fee_structures", default=None
    )
    invoice_not_a_bill_explanation: typing.Optional[bool] = pydantic.Field(
        alias="invoice_not_a_bill_explanation", default=None
    )
    invoice_show_agreement: typing.Optional[bool] = pydantic.Field(
        alias="invoice_show_agreement", default=None
    )
    is_active: typing.Optional[bool] = pydantic.Field(alias="is_active", default=None)
    is_billing_active: typing.Optional[bool] = pydantic.Field(
        alias="is_billing_active", default=None
    )
    logo_url: typing.Optional[str] = pydantic.Field(alias="logo_url", default=None)
    parent_firm_id: typing.Optional[int] = pydantic.Field(
        alias="parent_firm_id", default=None
    )
    relationship_code: typing.Optional[str] = pydantic.Field(
        alias="relationship_code", default=None
    )
    report_on_heldaway_accounts: typing.Optional[bool] = pydantic.Field(
        alias="report_on_heldaway_accounts", default=None
    )
    reporting_frequency: typing.Optional[
        typing_extensions.Literal["D", "Q", "Y", "M", "W"]
    ] = pydantic.Field(alias="reporting_frequency", default=None)
    short_name: typing.Optional[str] = pydantic.Field(alias="short_name", default=None)
    show_bridge_logo: typing.Optional[bool] = pydantic.Field(
        alias="show_bridge_logo", default=None
    )
    show_firm_logo: typing.Optional[bool] = pydantic.Field(
        alias="show_firm_logo", default=None
    )
