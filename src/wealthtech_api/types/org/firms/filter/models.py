"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class Firm(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    accent_color: typing.Optional[str] = pydantic.Field(
        alias="accent_color", default=None
    )
    billing_include_accrued_income: typing.Optional[bool] = pydantic.Field(
        alias="billing_include_accrued_income", default=None
    )
    billing_partition_option: typing.Optional[
        typing_extensions.Literal["Y", "Q", "W", "D", "M"]
    ] = pydantic.Field(alias="billing_partition_option", default=None)
    brand_colors: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="brand_colors", default=None
    )
    cp_enabled: typing.Optional[bool] = pydantic.Field(alias="cp_enabled", default=None)
    cp_heldaways_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_heldaways_enabled", default=None
    )
    cp_invoices_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_invoices_enabled", default=None
    )
    cp_printable_reports_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_printable_reports_enabled", default=None
    )
    cp_shared_files_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_shared_files_enabled", default=None
    )
    cp_web_reports_enabled: typing.Optional[bool] = pydantic.Field(
        alias="cp_web_reports_enabled", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    disclosures: typing.Optional[str] = pydantic.Field(
        alias="disclosures", default=None
    )
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    invoice_annualized_effective_rates: typing.Optional[bool] = pydantic.Field(
        alias="invoice_annualized_effective_rates", default=None
    )
    invoice_due_date_option: typing.Optional[typing_extensions.Literal["30", "E"]] = (
        pydantic.Field(alias="invoice_due_date_option", default=None)
    )
    invoice_effective_rates: typing.Optional[bool] = pydantic.Field(
        alias="invoice_effective_rates", default=None
    )
    invoice_footer: typing.Optional[str] = pydantic.Field(
        alias="invoice_footer", default=None
    )
    invoice_from: typing.Optional[str] = pydantic.Field(
        alias="invoice_from", default=None
    )
    invoice_header: typing.Optional[str] = pydantic.Field(
        alias="invoice_header", default=None
    )
    invoice_include_fee_structures: typing.Optional[bool] = pydantic.Field(
        alias="invoice_include_fee_structures", default=None
    )
    invoice_not_a_bill_explanation: typing.Optional[bool] = pydantic.Field(
        alias="invoice_not_a_bill_explanation", default=None
    )
    invoice_show_agreement: typing.Optional[bool] = pydantic.Field(
        alias="invoice_show_agreement", default=None
    )
    is_active: typing.Optional[bool] = pydantic.Field(alias="is_active", default=None)
    is_billing_active: typing.Optional[bool] = pydantic.Field(
        alias="is_billing_active", default=None
    )
    logo_url: typing.Optional[str] = pydantic.Field(alias="logo_url", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    parent_firm_id: typing.Optional[int] = pydantic.Field(
        alias="parent_firm_id", default=None
    )
    permissions: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="permissions", default=None
    )
    primary_color: typing.Optional[str] = pydantic.Field(
        alias="primary_color", default=None
    )
    relationship_code: typing.Optional[str] = pydantic.Field(
        alias="relationship_code", default=None
    )
    report_on_heldaway_accounts: typing.Optional[bool] = pydantic.Field(
        alias="report_on_heldaway_accounts", default=None
    )
    reporting_frequency: typing.Optional[
        typing_extensions.Literal["W", "Y", "Q", "D", "M"]
    ] = pydantic.Field(alias="reporting_frequency", default=None)
    short_name: typing.Optional[str] = pydantic.Field(alias="short_name", default=None)
    show_bridge_logo: typing.Optional[bool] = pydantic.Field(
        alias="show_bridge_logo", default=None
    )
    show_firm_logo: typing.Optional[bool] = pydantic.Field(
        alias="show_firm_logo", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostOrgFirmsFilterResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[Firm]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
