"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostOrgRoiRequestsSendRequestBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    advisor_codes: typing_extensions.Required[typing.List[str]]
    cc_emails: typing_extensions.Required[typing.List[str]]
    custodian: typing_extensions.Required[
        typing_extensions.Literal["IBK", "MLT", "EGB", "PER"]
    ]
    firm_name: typing_extensions.Required[str]
    owner_name: typing_extensions.Required[str]
    reply_to_emails: typing_extensions.Required[typing.List[str]]
    sender_name: typing_extensions.Required[str]


class _SerializerPostOrgRoiRequestsSendRequestBody(pydantic.BaseModel):
    """
    Serializer for PostOrgRoiRequestsSendRequestBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    advisor_codes: typing.List[str] = pydantic.Field(alias="advisor_codes")
    cc_emails: typing.List[str] = pydantic.Field(alias="cc_emails")
    custodian: typing_extensions.Literal["PER", "IBK", "EGB", "MLT"] = pydantic.Field(
        alias="custodian"
    )
    firm_name: str = pydantic.Field(alias="firm_name")
    owner_name: str = pydantic.Field(alias="owner_name")
    reply_to_emails: typing.List[str] = pydantic.Field(alias="reply_to_emails")
    sender_name: str = pydantic.Field(alias="sender_name")
