"""File Generated by Sideko (sideko.dev)"""

import io
import typing


import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class PostAccountManagementRelatedPersonsFilterResponseDataItemAddressesItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    address_1: typing.Optional[str] = pydantic.Field(alias="address_1", default=None)
    address_2: typing.Optional[str] = pydantic.Field(alias="address_2", default=None)
    city: typing.Optional[str] = pydantic.Field(alias="city", default=None)
    country: typing.Optional[str] = pydantic.Field(alias="country", default=None)
    postal_code: typing.Optional[str] = pydantic.Field(
        alias="postal_code", default=None
    )
    state: typing.Optional[str] = pydantic.Field(alias="state", default=None)
    type: typing.Optional[str] = pydantic.Field(alias="type", default=None)


class PostAccountManagementRelatedPersonsFilterResponseDataItemPhoneNumbersItem(
    pydantic.BaseModel
):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    phone_number: typing.Optional[str] = pydantic.Field(
        alias="phone_number", default=None
    )
    type: typing.Optional[str] = pydantic.Field(alias="type", default=None)


class PostAccountManagementRelatedPersonsFilterResponseDataItem(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    addresses: typing.Optional[
        typing.List[
            PostAccountManagementRelatedPersonsFilterResponseDataItemAddressesItem
        ]
    ] = pydantic.Field(alias="addresses", default=None)
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    date_of_birth: typing.Optional[str] = pydantic.Field(
        alias="date_of_birth", default=None
    )
    email_field: typing.Optional[str] = pydantic.Field(alias="email", default=None)
    entity_name: typing.Optional[str] = pydantic.Field(
        alias="entity_name", default=None
    )
    first_name: typing.Optional[str] = pydantic.Field(alias="first_name", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    last_name: typing.Optional[str] = pydantic.Field(alias="last_name", default=None)
    middle_initial: typing.Optional[str] = pydantic.Field(
        alias="middle_initial", default=None
    )
    phone_numbers: typing.Optional[
        typing.List[
            PostAccountManagementRelatedPersonsFilterResponseDataItemPhoneNumbersItem
        ]
    ] = pydantic.Field(alias="phone_numbers", default=None)
    tax_id_token: typing.Optional[str] = pydantic.Field(
        alias="tax_id_token", default=None
    )
    type: typing.Optional[int] = pydantic.Field(alias="type", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostAccountManagementRelatedPersonsFilterResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[
        typing.List[PostAccountManagementRelatedPersonsFilterResponseDataItem]
    ] = pydantic.Field(alias="data", default=None)
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
