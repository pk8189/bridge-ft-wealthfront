"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostAccountManagementRelatedPersonsFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    account_id: typing_extensions.NotRequired[int]
    account_ids: typing_extensions.NotRequired[typing.List[int]]
    date_of_birth: typing_extensions.NotRequired[str]
    email_field: typing_extensions.NotRequired[str]
    entity_name: typing_extensions.NotRequired[str]
    first_name: typing_extensions.NotRequired[str]
    id: typing_extensions.NotRequired[int]
    last_name: typing_extensions.NotRequired[str]
    middle_initial: typing_extensions.NotRequired[str]
    tax_id_token: typing_extensions.NotRequired[str]
    type: typing_extensions.NotRequired[int]


class _SerializerPostAccountManagementRelatedPersonsFilterBody(pydantic.BaseModel):
    """
    Serializer for PostAccountManagementRelatedPersonsFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    account_id: typing.Optional[int] = pydantic.Field(alias="account_id", default=None)
    account_ids: typing.Optional[typing.List[int]] = pydantic.Field(
        alias="account_ids", default=None
    )
    date_of_birth: typing.Optional[str] = pydantic.Field(
        alias="date_of_birth", default=None
    )
    email_field: typing.Optional[str] = pydantic.Field(alias="email", default=None)
    entity_name: typing.Optional[str] = pydantic.Field(
        alias="entity_name", default=None
    )
    first_name: typing.Optional[str] = pydantic.Field(alias="first_name", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    last_name: typing.Optional[str] = pydantic.Field(alias="last_name", default=None)
    middle_initial: typing.Optional[str] = pydantic.Field(
        alias="middle_initial", default=None
    )
    tax_id_token: typing.Optional[str] = pydantic.Field(
        alias="tax_id_token", default=None
    )
    type: typing.Optional[int] = pydantic.Field(alias="type", default=None)
