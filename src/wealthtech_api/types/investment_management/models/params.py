"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostInvestmentManagementModelsBodyStrategyAllocationsItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    strategy_id: typing_extensions.NotRequired[int]
    weight: typing_extensions.NotRequired[float]


class _SerializerPostInvestmentManagementModelsBodyStrategyAllocationsItem(
    pydantic.BaseModel
):
    """
    Serializer for PostInvestmentManagementModelsBodyStrategyAllocationsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    strategy_id: typing.Optional[int] = pydantic.Field(
        alias="strategy_id", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class ModelStrategyAllocationsItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.NotRequired[int]
    model_id: typing_extensions.NotRequired[int]
    strategy_id: typing_extensions.NotRequired[int]
    weight: typing_extensions.NotRequired[float]


class _SerializerModelStrategyAllocationsItem(pydantic.BaseModel):
    """
    Serializer for ModelStrategyAllocationsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    model_id: typing.Optional[int] = pydantic.Field(alias="model_id", default=None)
    strategy_id: typing.Optional[int] = pydantic.Field(
        alias="strategy_id", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class PostInvestmentManagementModelsBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    firm_id: typing_extensions.NotRequired[int]
    name: typing_extensions.NotRequired[str]
    strategy_allocations: typing_extensions.NotRequired[
        typing.List[PostInvestmentManagementModelsBodyStrategyAllocationsItem]
    ]


class _SerializerPostInvestmentManagementModelsBody(pydantic.BaseModel):
    """
    Serializer for PostInvestmentManagementModelsBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    strategy_allocations: typing.Optional[
        typing.List[
            _SerializerPostInvestmentManagementModelsBodyStrategyAllocationsItem
        ]
    ] = pydantic.Field(alias="strategy_allocations", default=None)


class Model(typing_extensions.TypedDict):
    """
    No description specified
    """

    created_at_utc: typing_extensions.NotRequired[str]
    firm_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    name: typing_extensions.NotRequired[str]
    strategy_allocations: typing_extensions.NotRequired[
        typing.List[ModelStrategyAllocationsItem]
    ]
    updated_at_utc: typing_extensions.NotRequired[str]


class _SerializerModel(pydantic.BaseModel):
    """
    Serializer for Model handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    strategy_allocations: typing.Optional[
        typing.List[_SerializerModelStrategyAllocationsItem]
    ] = pydantic.Field(alias="strategy_allocations", default=None)
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
