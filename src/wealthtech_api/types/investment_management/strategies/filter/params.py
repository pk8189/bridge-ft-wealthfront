"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostInvestmentManagementStrategiesFilterBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    asset_type: typing_extensions.NotRequired[str]
    benchmark_id: typing_extensions.NotRequired[int]
    created_at_utc: typing_extensions.NotRequired[str]
    description: typing_extensions.NotRequired[str]
    fee: typing_extensions.NotRequired[float]
    firm_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    investment_minimum: typing_extensions.NotRequired[float]
    name: typing_extensions.NotRequired[str]
    provider: typing_extensions.NotRequired[str]
    risk_category: typing_extensions.NotRequired[
        typing_extensions.Literal["AG", "MC", "CP", "GR", "CO", "MO", "MG"]
    ]
    strategy_type: typing_extensions.NotRequired[
        typing_extensions.Literal["Alternatives", "Satellite", "Core", "Income"]
    ]
    tax_managed: typing_extensions.NotRequired[bool]
    updated_at_utc: typing_extensions.NotRequired[str]


class _SerializerPostInvestmentManagementStrategiesFilterBody(pydantic.BaseModel):
    """
    Serializer for PostInvestmentManagementStrategiesFilterBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    asset_type: typing.Optional[str] = pydantic.Field(alias="asset_type", default=None)
    benchmark_id: typing.Optional[int] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    fee: typing.Optional[float] = pydantic.Field(alias="fee", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    investment_minimum: typing.Optional[float] = pydantic.Field(
        alias="investment_minimum", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    provider: typing.Optional[str] = pydantic.Field(alias="provider", default=None)
    risk_category: typing.Optional[
        typing_extensions.Literal["CO", "MC", "MO", "MG", "GR", "AG", "CP"]
    ] = pydantic.Field(alias="risk_category", default=None)
    strategy_type: typing.Optional[
        typing_extensions.Literal["Alternatives", "Income", "Satellite", "Core"]
    ] = pydantic.Field(alias="strategy_type", default=None)
    tax_managed: typing.Optional[bool] = pydantic.Field(
        alias="tax_managed", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
