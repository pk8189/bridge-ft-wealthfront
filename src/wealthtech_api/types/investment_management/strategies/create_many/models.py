"""File Generated by Sideko (sideko.dev)"""

import io
import typing

import typing_extensions
import pydantic

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class StrategySecurityAllocationsItem(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    strategy_id: typing.Optional[int] = pydantic.Field(
        alias="strategy_id", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class Strategy(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    asset_type: typing.Optional[str] = pydantic.Field(alias="asset_type", default=None)
    benchmark_id: typing.Optional[int] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    esg: typing.Optional[bool] = pydantic.Field(alias="esg", default=None)
    etf_action_identifier: typing.Optional[str] = pydantic.Field(
        alias="etf_action_identifier", default=None
    )
    fact_sheet_available: typing.Optional[bool] = pydantic.Field(
        alias="fact_sheet_available", default=None
    )
    fee: typing.Optional[float] = pydantic.Field(alias="fee", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    investment_minimum: typing.Optional[float] = pydantic.Field(
        alias="investment_minimum", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    provider: typing.Optional[str] = pydantic.Field(alias="provider", default=None)
    risk_category: typing.Optional[
        typing_extensions.Literal["CP", "GR", "CO", "MG", "MO", "MC", "AG"]
    ] = pydantic.Field(alias="risk_category", default=None)
    search_tags: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="search_tags", default=None
    )
    security_allocations: typing.Optional[
        typing.List[StrategySecurityAllocationsItem]
    ] = pydantic.Field(alias="security_allocations", default=None)
    strategy_type: typing.Optional[
        typing_extensions.Literal["Core", "Satellite", "Income", "Alternatives"]
    ] = pydantic.Field(alias="strategy_type", default=None)
    tax_managed: typing.Optional[bool] = pydantic.Field(
        alias="tax_managed", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )


class PostInvestmentManagementStrategiesCreateManyResponse(pydantic.BaseModel):
    model_config = pydantic.ConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    current_page: typing.Optional[int] = pydantic.Field(
        alias="current_page", default=None
    )
    data: typing.Optional[typing.List[Strategy]] = pydantic.Field(
        alias="data", default=None
    )
    has_next: typing.Optional[bool] = pydantic.Field(alias="has_next", default=None)
    has_previous: typing.Optional[bool] = pydantic.Field(
        alias="has_previous", default=None
    )
    object: typing.Optional[str] = pydantic.Field(alias="object", default=None)
    page_size_limit: typing.Optional[int] = pydantic.Field(
        alias="page_size_limit", default=None
    )
    total_items: typing.Optional[int] = pydantic.Field(
        alias="total_items", default=None
    )
    total_pages: typing.Optional[int] = pydantic.Field(
        alias="total_pages", default=None
    )
