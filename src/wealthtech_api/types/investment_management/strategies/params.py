"""File Generated by Sideko (sideko.dev)"""

from __future__ import annotations
import io
import typing
import pydantic
import typing_extensions

HttpxFile = typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]


class PostInvestmentManagementStrategiesBodySecurityAllocationsItem(
    typing_extensions.TypedDict
):
    """
    No description specified
    """

    security_id: typing_extensions.NotRequired[int]
    weight: typing_extensions.NotRequired[float]


class _SerializerPostInvestmentManagementStrategiesBodySecurityAllocationsItem(
    pydantic.BaseModel
):
    """
    Serializer for PostInvestmentManagementStrategiesBodySecurityAllocationsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class StrategySecurityAllocationsItem(typing_extensions.TypedDict):
    """
    No description specified
    """

    id: typing_extensions.NotRequired[int]
    security_id: typing_extensions.NotRequired[int]
    strategy_id: typing_extensions.NotRequired[int]
    weight: typing_extensions.NotRequired[float]


class _SerializerStrategySecurityAllocationsItem(pydantic.BaseModel):
    """
    Serializer for StrategySecurityAllocationsItem handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    security_id: typing.Optional[int] = pydantic.Field(
        alias="security_id", default=None
    )
    strategy_id: typing.Optional[int] = pydantic.Field(
        alias="strategy_id", default=None
    )
    weight: typing.Optional[float] = pydantic.Field(alias="weight", default=None)


class PostInvestmentManagementStrategiesBody(typing_extensions.TypedDict):
    """
    No description specified
    """

    firm_id: typing_extensions.NotRequired[int]
    name: typing_extensions.NotRequired[str]
    security_allocations: typing_extensions.NotRequired[
        typing.List[PostInvestmentManagementStrategiesBodySecurityAllocationsItem]
    ]


class _SerializerPostInvestmentManagementStrategiesBody(pydantic.BaseModel):
    """
    Serializer for PostInvestmentManagementStrategiesBody handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    security_allocations: typing.Optional[
        typing.List[
            _SerializerPostInvestmentManagementStrategiesBodySecurityAllocationsItem
        ]
    ] = pydantic.Field(alias="security_allocations", default=None)


class Strategy(typing_extensions.TypedDict):
    """
    No description specified
    """

    asset_type: typing_extensions.NotRequired[str]
    benchmark_id: typing_extensions.NotRequired[int]
    created_at_utc: typing_extensions.NotRequired[str]
    description: typing_extensions.NotRequired[str]
    esg: typing_extensions.NotRequired[bool]
    etf_action_identifier: typing_extensions.NotRequired[str]
    fact_sheet_available: typing_extensions.NotRequired[bool]
    fee: typing_extensions.NotRequired[float]
    firm_id: typing_extensions.NotRequired[int]
    id: typing_extensions.NotRequired[int]
    investment_minimum: typing_extensions.NotRequired[float]
    name: typing_extensions.NotRequired[str]
    provider: typing_extensions.NotRequired[str]
    risk_category: typing_extensions.NotRequired[
        typing_extensions.Literal["MO", "AG", "MC", "GR", "CP", "CO", "MG"]
    ]
    search_tags: typing_extensions.NotRequired[typing.List[str]]
    security_allocations: typing_extensions.NotRequired[
        typing.List[StrategySecurityAllocationsItem]
    ]
    strategy_type: typing_extensions.NotRequired[
        typing_extensions.Literal["Income", "Satellite", "Alternatives", "Core"]
    ]
    tax_managed: typing_extensions.NotRequired[bool]
    updated_at_utc: typing_extensions.NotRequired[str]


class _SerializerStrategy(pydantic.BaseModel):
    """
    Serializer for Strategy handling case conversions
    and file omitions as dictated by the API
    """

    model_config = pydantic.ConfigDict(
        populate_by_name=True,
    )

    asset_type: typing.Optional[str] = pydantic.Field(alias="asset_type", default=None)
    benchmark_id: typing.Optional[int] = pydantic.Field(
        alias="benchmark_id", default=None
    )
    created_at_utc: typing.Optional[str] = pydantic.Field(
        alias="created_at_utc", default=None
    )
    description: typing.Optional[str] = pydantic.Field(
        alias="description", default=None
    )
    esg: typing.Optional[bool] = pydantic.Field(alias="esg", default=None)
    etf_action_identifier: typing.Optional[str] = pydantic.Field(
        alias="etf_action_identifier", default=None
    )
    fact_sheet_available: typing.Optional[bool] = pydantic.Field(
        alias="fact_sheet_available", default=None
    )
    fee: typing.Optional[float] = pydantic.Field(alias="fee", default=None)
    firm_id: typing.Optional[int] = pydantic.Field(alias="firm_id", default=None)
    id: typing.Optional[int] = pydantic.Field(alias="id", default=None)
    investment_minimum: typing.Optional[float] = pydantic.Field(
        alias="investment_minimum", default=None
    )
    name: typing.Optional[str] = pydantic.Field(alias="name", default=None)
    provider: typing.Optional[str] = pydantic.Field(alias="provider", default=None)
    risk_category: typing.Optional[
        typing_extensions.Literal["CP", "AG", "GR", "MO", "CO", "MC", "MG"]
    ] = pydantic.Field(alias="risk_category", default=None)
    search_tags: typing.Optional[typing.List[str]] = pydantic.Field(
        alias="search_tags", default=None
    )
    security_allocations: typing.Optional[
        typing.List[_SerializerStrategySecurityAllocationsItem]
    ] = pydantic.Field(alias="security_allocations", default=None)
    strategy_type: typing.Optional[
        typing_extensions.Literal["Core", "Satellite", "Income", "Alternatives"]
    ] = pydantic.Field(alias="strategy_type", default=None)
    tax_managed: typing.Optional[bool] = pydantic.Field(
        alias="tax_managed", default=None
    )
    updated_at_utc: typing.Optional[str] = pydantic.Field(
        alias="updated_at_utc", default=None
    )
