"""File Generated by Sideko (sideko.dev)"""

import httpx
import typing
from wealthtech_api.environment import Environment
from wealthtech_api.core import AsyncBaseClient, SyncBaseClient, AuthBearer, AuthBasic
from wealthtech_api.resources.billing import AsyncBillingClient, BillingClient
from wealthtech_api.resources.investment_management import (
    AsyncInvestmentManagementClient,
    InvestmentManagementClient,
)
from wealthtech_api.resources.org import OrgClient, AsyncOrgClient
from wealthtech_api.resources.reporting import ReportingClient, AsyncReportingClient
from wealthtech_api.resources.account_management import (
    AccountManagementClient,
    AsyncAccountManagementClient,
)
from wealthtech_api.resources.analytics import AsyncAnalyticsClient, AnalyticsClient
from wealthtech_api.resources.data import AsyncDataClient, DataClient
from wealthtech_api.resources.jobs import AsyncJobsClient, JobsClient
from wealthtech_api.resources.market_data import AsyncMarketDataClient, MarketDataClient
from wealthtech_api.resources.status import StatusClient, AsyncStatusClient
from wealthtech_api.resources.oauth2 import AsyncOauth2Client, Oauth2Client


class Client:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Environment = Environment.DEFAULT,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        token: typing.Optional[str] = None,
    ):
        self._base_client = SyncBaseClient(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=(
                httpx.Client(timeout=timeout) if httpx_client is None else httpx_client
            ),
        )

        # register auth methods (keep comment for code generation)
        self._base_client.register_auth(
            "basicAuth", AuthBasic(username=username, password=password)
        )
        self._base_client.register_auth("bearerAuth", AuthBearer(val=token))

        # register sync resources (keep comment for code generation)
        self.billing = BillingClient(base_client=self._base_client)
        self.investment_management = InvestmentManagementClient(
            base_client=self._base_client
        )
        self.org = OrgClient(base_client=self._base_client)
        self.reporting = ReportingClient(base_client=self._base_client)
        self.account_management = AccountManagementClient(base_client=self._base_client)
        self.analytics = AnalyticsClient(base_client=self._base_client)
        self.data = DataClient(base_client=self._base_client)
        self.jobs = JobsClient(base_client=self._base_client)
        self.market_data = MarketDataClient(base_client=self._base_client)
        self.status = StatusClient(base_client=self._base_client)
        self.oauth2 = Oauth2Client(base_client=self._base_client)

    # register sync api methods (keep comment for code generation)


class AsyncClient:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: Environment = Environment.DEFAULT,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
        username: typing.Optional[str] = None,
        password: typing.Optional[str] = None,
        token: typing.Optional[str] = None,
    ):
        self._base_client = AsyncBaseClient(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            httpx_client=(
                httpx.AsyncClient(timeout=timeout)
                if httpx_client is None
                else httpx_client
            ),
        )

        # register auth methods (keep comment for code generation)
        self._base_client.register_auth(
            "basicAuth", AuthBasic(username=username, password=password)
        )
        self._base_client.register_auth("bearerAuth", AuthBearer(val=token))

        # register async resources (keep comment for code generation)
        self.billing = AsyncBillingClient(base_client=self._base_client)
        self.investment_management = AsyncInvestmentManagementClient(
            base_client=self._base_client
        )
        self.org = AsyncOrgClient(base_client=self._base_client)
        self.reporting = AsyncReportingClient(base_client=self._base_client)
        self.account_management = AsyncAccountManagementClient(
            base_client=self._base_client
        )
        self.analytics = AsyncAnalyticsClient(base_client=self._base_client)
        self.data = AsyncDataClient(base_client=self._base_client)
        self.jobs = AsyncJobsClient(base_client=self._base_client)
        self.market_data = AsyncMarketDataClient(base_client=self._base_client)
        self.status = AsyncStatusClient(base_client=self._base_client)
        self.oauth2 = AsyncOauth2Client(base_client=self._base_client)

    # register async api methods (keep comment for code generation)


def _get_base_url(
    *, base_url: typing.Optional[str] = None, environment: Environment
) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Must include a base_url or environment arguments")
